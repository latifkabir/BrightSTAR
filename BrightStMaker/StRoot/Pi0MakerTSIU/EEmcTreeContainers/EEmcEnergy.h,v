head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2012.11.26.19.37.32;	author sgliske;	state dead;
branches;
next	1.7;

1.7
date	2012.06.04.21.28.08;	author sgliske;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.01.22.10.48;	author sgliske;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.01.21.50.11;	author sgliske;	state Exp;
branches;
next	1.4;

1.4
date	2012.05.23.19.58.37;	author sgliske;	state Exp;
branches;
next	1.3;

1.3
date	2012.05.22.22.01.07;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2012.05.18.22.12.47;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2012.05.16.20.48.02;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Moved to StRoot/StEEmcPool/EEmcTreeContainers
@
text
@/*
 * Created by S. Gliske, May 2012
 *
 * Description: Containers used in the EEmcEnergyTree.  Note: they do
 * not explicitly depend on the STAR framework, and so the trees can
 * be read outside of the STAR framework.  Note: data members are all
 * public, to allow a lighter weight implementation.
 *
 */

#ifndef EEmcEnergy_H_
#define EEmcEnergy_H_

#include <Rtypes.h>
#include <TObject.h>

//
// TOWERS
//

class EEmcElement_t {
 public:
   EEmcElement_t();
   virtual ~EEmcElement_t(){ /* */ };
   void Clear();

   Int_t fail;
   Float_t energy;

 private:
   ClassDef( EEmcElement_t, 1 );
};

inline void EEmcElement_t::Clear(){ fail = 0; energy = 0; };


class ETowEnergy_t {
 public:
   ETowEnergy_t(){ /* */ };
   virtual ~ETowEnergy_t(){ /* */ };
   void Clear();

   // methods to return elements.
   // WARNING: no bounds checking!
   EEmcElement_t& getByIdx( Int_t idx );
   EEmcElement_t& getByBin( Int_t sec, Int_t sub, Int_t etabin );
   EEmcElement_t& getByBin( Int_t phibin, Int_t etabin );
   const EEmcElement_t& getByIdx( Int_t idx ) const;
   const EEmcElement_t& getByBin( Int_t sec, Int_t sub, Int_t etabin ) const;
   const EEmcElement_t& getByBin( Int_t phibin, Int_t etabin ) const;

 protected:
   EEmcElement_t element[720];

 private:
   ClassDef( ETowEnergy_t, 1 );
};

inline EEmcElement_t& ETowEnergy_t::getByIdx( Int_t idx ){
   return element[ idx ];
};

inline const EEmcElement_t& ETowEnergy_t::getByIdx( Int_t idx ) const{
   return element[ idx ];
};

inline EEmcElement_t& ETowEnergy_t::getByBin( Int_t sec, Int_t sub, Int_t etabin ){
   return element[ 12*( 5*sec + sub ) + etabin ];
};

inline const EEmcElement_t& ETowEnergy_t::getByBin( Int_t sec, Int_t sub, Int_t etabin ) const {
   return element[ 12*( 5*sec + sub ) + etabin ];
};

inline EEmcElement_t& ETowEnergy_t::getByBin( Int_t phibin, Int_t etabin ){
   return element[ 12*phibin + etabin ];
};

inline const EEmcElement_t& ETowEnergy_t::getByBin( Int_t phibin, Int_t etabin ) const {
   return element[ 12*phibin + etabin ];
};


//
// STRIPS
//

class ESmdLayer_t {
 public:
   ESmdLayer_t(){ /* */ };
   virtual ~ESmdLayer_t(){ /* */ };
   void Clear();

   Int_t nStrips;
   EEmcElement_t strip[288];

 private:
   ClassDef( ESmdLayer_t, 1);
};

class ESmdSector_t {
 public:
   ESmdSector_t(){ /* */ };
   virtual ~ESmdSector_t(){ /* */ };
   void Clear();

   ESmdLayer_t layer[2];

 private:
   ClassDef( ESmdSector_t, 1 );
};

class ESmdEnergy_t {
 public:
   ESmdEnergy_t(){ /* */ };
   virtual ~ESmdEnergy_t(){ /* */ };
   void Clear();

   ESmdSector_t sec[12];

 private:
   ClassDef( ESmdEnergy_t, 1 );
};

//
// TOTAL EEMC 
//

class EEmcEnergy_t : public TObject {
 public:
   EEmcEnergy_t() : nTowers(0), nStrips(0) { /* */ };
   virtual ~EEmcEnergy_t(){ /* */ };
   void Clear( const Option_t* opt = "" );

   ETowEnergy_t eTow;
   ETowEnergy_t ePre1;
   ETowEnergy_t ePre2;
   ETowEnergy_t ePost;
   ESmdEnergy_t eSmd;

   UInt_t nTowers, nStrips;

 private:
   ClassDef( EEmcEnergy_t, 1 );
};

#endif

/*
 * $Id: EEmcEnergy.h,v 1.7 2012/06/04 21:28:08 sgliske Exp $
 * $Log: EEmcEnergy.h,v $
 * Revision 1.7  2012/06/04 21:28:08  sgliske
 * Updates--testing StMcEEmcTreeMaker
 *
 * Revision 1.6  2012/06/01 22:10:48  sgliske
 * Updated to allow complilation with ACLiC outside of STAR framework
 *
 * Revision 1.5  2012/06/01 21:50:11  sgliske
 * Updated for overhaul of EEmcHit and EEmcCluster.  Both had dynamic arrays removed as well as
 * dependencies on StEEmcHit containers removed.  Converters between StEEmcHit containers and
 * EEmcTree containers now provided by static functions in StEEmcTreeMaker.
 *
 * Revision 1.4  2012/05/23 19:58:37  sgliske
 * updates
 *
 * Revision 1.3  2012/05/22 22:01:07  sgliske
 * updates
 *
 * Revision 1.2  2012/05/18 22:12:47  sgliske
 * updates
 *
 * Revision 1.1  2012/05/16 20:48:02  sgliske
 * moved from StEEmcTree to EEmcTreeContainers
 *
 * Revision 1.4  2012/05/15 20:52:47  sgliske
 * created more containers
 *
 * Revision 1.3  2012/05/14 22:01:45  sgliske
 * update
 *
 * Revision 1.2  2012/05/14 21:50:53  sgliske
 * moved EEmcEnergyTreeContainers.(h|cxx) to EEmcEnergy.(h|cxx)
 *
 * Revision 1.1  2012/05/14 21:49:32  sgliske
 * moved EEmcEnergyTreeContainers.(h|cxx) to EEmcEnergy.(h|cxx)
 *
 * Revision 1.1  2012/05/11 17:46:31  sgliske
 * creation
 *
 */
@


1.7
log
@Updates--testing StMcEEmcTreeMaker
@
text
@d150 1
a150 1
 * $Id: EEmcEnergy.h,v 1.6 2012/06/01 22:10:48 sgliske Exp $
d152 3
@


1.6
log
@Updated to allow complilation with ACLiC outside of STAR framework
@
text
@d131 1
a131 1
   EEmcEnergy_t(){ /* */ };
d150 1
a150 1
 * $Id: EEmcEnergy.h,v 1.5 2012/06/01 21:50:11 sgliske Exp $
d152 3
@


1.5
log
@Updated for overhaul of EEmcHit and EEmcCluster.  Both had dynamic arrays removed as well as
dependencies on StEEmcHit containers removed.  Converters between StEEmcHit containers and
EEmcTree containers now provided by static functions in StEEmcTreeMaker.
@
text
@d24 1
d40 1
d91 1
d104 1
d116 1
d132 1
d150 1
a150 1
 * $Id: EEmcEnergy.h,v 1.4 2012/05/23 19:58:37 sgliske Exp $
d152 5
@


1.4
log
@updates
@
text
@d7 1
a7 1
 * public, so as to faciliate directly drawing from the TTree.
d15 1
d124 1
a124 1
class EEmcEnergy_t {
d127 1
a127 1
   void Clear();
d144 1
a144 1
 * $Id: EEmcEnergy.h,v 1.3 2012/05/22 22:01:07 sgliske Exp $
d146 3
@


1.3
log
@updates
@
text
@d128 5
a132 5
   ETowEnergy_t etow;
   ETowEnergy_t epre1;
   ETowEnergy_t epre2;
   ETowEnergy_t epost;
   ESmdEnergy_t esmd;
d143 1
a143 1
 * $Id: EEmcEnergy.h,v 1.2 2012/05/18 22:12:47 sgliske Exp $
d145 3
@


1.2
log
@updates
@
text
@a31 1
inline EEmcElement_t::EEmcElement_t() : fail( 0 ), energy( 0 ) { /* */ };
d143 1
a143 1
 * $Id: EEmcEnergy.h,v 1.1 2012/05/16 20:48:02 sgliske Exp $
d145 3
@


1.1
log
@moved from StEEmcTree to EEmcTreeContainers
@
text
@d35 2
a36 1
class ETowSubSector_t {
d38 1
a38 1
   ETowSubSector_t(){ /* */ };
d41 11
a51 1
   EEmcElement_t eta[12];
d54 1
a54 1
   ClassDef( ETowSubSector_t, 1 );
d57 3
a59 4
class ETowSector_t {
 public:
   ETowSector_t(){ /* */ };
   void Clear();
d61 3
a63 1
   ETowSubSector_t sub[5];
d65 2
a66 2
 private:
   ClassDef( ETowSector_t, 1 );
d69 3
a71 4
class ETowEnergy_t {
 public:
   ETowEnergy_t(){ /* */ };
   void Clear();
d73 3
a75 1
   ETowSector_t sec[12];
d77 2
a78 2
 private:
   ClassDef( ETowEnergy_t, 1 );
d81 1
d91 1
d144 1
a144 1
 * $Id: EEmcEnergy.h,v 1.4 2012/05/15 20:52:47 sgliske Exp $
d146 3
@

