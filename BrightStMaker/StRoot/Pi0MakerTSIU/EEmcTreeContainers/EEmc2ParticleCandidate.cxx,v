head	1.8;
access;
symbols;
locks; strict;
comment	@// @;


1.8
date	2012.11.26.19.37.32;	author sgliske;	state dead;
branches;
next	1.7;

1.7
date	2012.06.19.15.04.10;	author sgliske;	state Exp;
branches;
next	1.6;

1.6
date	2012.05.25.16.20.14;	author sgliske;	state Exp;
branches;
next	1.5;

1.5
date	2012.05.25.04.21.57;	author sgliske;	state Exp;
branches;
next	1.4;

1.4
date	2012.05.23.19.58.37;	author sgliske;	state Exp;
branches;
next	1.3;

1.3
date	2012.05.22.22.01.07;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2012.05.22.15.37.16;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2012.05.21.21.08.15;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Moved to StRoot/StEEmcPool/EEmcTreeContainers
@
text
@/*
 * Created by S. Gliske, May 2012
 *
 * Description: see header.
 *
 */

#include "EEmc2ParticleCandidate.h"

#include <cmath>
#include <iostream>
using std::cerr;
using std::endl;

EEmc2ParticleCandidate_t::EEmc2ParticleCandidate_t( const EEmcParticleCandidate_t& childA, const EEmcParticleCandidate_t& childB ){
   const EEmcParticleCandidate_t* child1 = &childA;
   const EEmcParticleCandidate_t* child2 = &childB;

   // sort by higher energy
   if( child1->E < child2->E ){
      child1 = &childB;
      child2 = &childA;
   };

   PID = 2000;
   hitIdx1 = child1->hitIdx1;
   hitIdx2 = child2->hitIdx1;

   E = child1->E + child2->E;
   Z = E ? ( child1->E - child2->E ) / E : 0;
   position = ( child1->position + child2->position ) * 0.5;
   momentum = ( child1->momentum + child2->momentum );
   D = ( child1->position - child2->position ).Mag();  // assume same Z pos

   PT = momentum.Perp();
   M = E*E - momentum.Mag2();
   M = ( M > 0 ? sqrt(M) : -sqrt(-M) );
};

ClassImp( EEmc2ParticleCandidate_t );

/*
 * $Id: EEmc2ParticleCandidate.cxx,v 1.7 2012/06/19 15:04:10 sgliske Exp $
 * $Log: EEmc2ParticleCandidate.cxx,v $
 * Revision 1.7  2012/06/19 15:04:10  sgliske
 * updates
 *
 * Revision 1.6  2012/05/25 16:20:14  sgliske
 * ready for production (I hope)
 *
 * Revision 1.5  2012/05/25 04:21:57  sgliske
 * updates
 *
 * Revision 1.4  2012/05/23 19:58:37  sgliske
 * updates
 *
 * Revision 1.3  2012/05/22 22:01:07  sgliske
 * updates
 *
 * Revision 1.2  2012/05/22 15:37:16  sgliske
 * added StEEmcParticleCandidateMaker
 *
 * Revision 1.1  2012/05/21 21:08:15  sgliske
 * added support for candidate particles, both 1 and 2
 *
 */
@


1.7
log
@updates
@
text
@d43 1
a43 1
 * $Id: EEmc2ParticleCandidate.cxx,v 1.6 2012/05/25 16:20:14 sgliske Exp $
d45 3
@


1.6
log
@ready for production (I hope)
@
text
@d33 1
d43 1
a43 1
 * $Id: EEmc2ParticleCandidate.cxx,v 1.5 2012/05/25 04:21:57 sgliske Exp $
d45 3
@


1.5
log
@updates
@
text
@d26 2
a27 2
   hitIdx = child1->hitIdx;
   hitIdx2 = child2->hitIdx;
d42 1
a42 1
 * $Id: EEmc2ParticleCandidate.cxx,v 1.4 2012/05/23 19:58:37 sgliske Exp $
d44 3
@


1.4
log
@updates
@
text
@d26 2
a27 2
   hitIdx = child1->E;
   hitIdx2 = child2->E;
d30 1
a30 1
   Z = ( child1->E - child2->E ) / E;
d35 2
a36 1
   M = sqrt( E*E - momentum.Mag2() );
d42 1
a42 1
 * $Id: EEmc2ParticleCandidate.cxx,v 1.3 2012/05/22 22:01:07 sgliske Exp $
d44 3
@


1.3
log
@updates
@
text
@d10 1
d15 21
a35 3
EEmc2ParticleCandidate_t::EEmc2ParticleCandidate_t( Int_t hitIdx1, const EEmcHit_t* hitPtr1, Int_t hitIdx2, const EEmcHit_t* hitPtr2  ){
   cerr << "NOT YET PROGRAMMED: EEmc2ParticleCandidate_t( Int_t hitIdx1, const EEmcHit_t* hitPtr1, Int_t hitIdx2, const EEmcHit_t* hitPtr2  )" << endl;
   throw(0);
d41 1
a41 1
 * $Id: EEmc2ParticleCandidate.cxx,v 1.2 2012/05/22 15:37:16 sgliske Exp $
d43 3
@


1.2
log
@added StEEmcParticleCandidateMaker
@
text
@d10 9
d22 1
a22 1
 * $Id: EEmc2ParticleCandidate.cxx,v 1.1 2012/05/21 21:08:15 sgliske Exp $
d24 3
@


1.1
log
@added support for candidate particles, both 1 and 2
@
text
@d10 1
a10 1
ClassDef( EEmc2ParticleCandidate_t, 1);
d13 5
a17 2
 * $Id: $
 * $Log: $
@

