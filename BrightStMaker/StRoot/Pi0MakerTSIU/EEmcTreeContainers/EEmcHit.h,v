head	1.10;
access;
symbols;
locks; strict;
comment	@ * @;


1.10
date	2012.11.26.19.37.32;	author sgliske;	state dead;
branches;
next	1.9;

1.9
date	2012.06.19.15.04.10;	author sgliske;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.14.05.03.50;	author sgliske;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.01.22.10.48;	author sgliske;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.01.21.50.12;	author sgliske;	state Exp;
branches;
next	1.5;

1.5
date	2012.06.01.21.26.07;	author sgliske;	state Exp;
branches;
next	1.4;

1.4
date	2012.05.31.22.13.13;	author sgliske;	state Exp;
branches;
next	1.3;

1.3
date	2012.05.25.16.20.15;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2012.05.25.03.19.00;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2012.05.16.20.48.04;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Moved to StRoot/StEEmcPool/EEmcTreeContainers
@
text
@/*
 * Created by S. Gliske, May 2012
 *
 * Description: Container used in the EEmcAnalysisTree.  Note: this
 * class does not explicitly depend on the STAR framework, and so the
 * trees can be read outside of the STAR framework.  Note: data
 * members are most all public, to allow a lighter weight
 * implementation.
 *
 */

#ifndef EEmcHit_H_
#define EEmcHit_H_

#include <Rtypes.h>
#include <TObject.h>
#include <TArrayS.h>
#include <TArrayF.h>

class EEmcHit_t : public TObject{
 public:
   EEmcHit_t();
   virtual ~EEmcHit_t(){ /* */ };

   void Clear( const Option_t* );

   Int_t uClusIdx, vClusIdx;

   Float_t x, y;      // position on the EEMC
   Float_t eta, phi;  // x,y in other coord system

   Float_t eTow, ePost;   // Total energy in the towers and post, summed over all used towers
   Float_t  ePre1, ePre2; // Energy in each preshower layer, for just the central tower

   // the following is to store the indices and weights of the "used"
   // towers

   enum { kMaxNumTowers = 9 };

   Short_t centralTowerIdx;
   Short_t numUsedTowers;

   Short_t usedTowerIdx[ kMaxNumTowers ];
   Float_t usedTowerWeight[ kMaxNumTowers ];

 private:
   ClassDef( EEmcHit_t, 3 );
};

#endif

/*
 * $Id: EEmcHit.h,v 1.9 2012/06/19 15:04:10 sgliske Exp $
 * $Log: EEmcHit.h,v $
 * Revision 1.9  2012/06/19 15:04:10  sgliske
 * updates
 *
 * Revision 1.8  2012/06/14 05:03:50  sgliske
 * Removed TArrayS and TArrayF from EEmcSmdCluster and EEmcHit, as
 * they still contain dynamic arrays, and so things fail when using
 * TClonesArrays.  Now both use a static array.
 *
 * Revision 1.7  2012/06/01 22:10:48  sgliske
 * Updated to allow complilation with ACLiC outside of STAR framework
 *
 * Revision 1.6  2012/06/01 21:50:12  sgliske
 * Updated for overhaul of EEmcHit and EEmcCluster.  Both had dynamic arrays removed as well as
 * dependencies on StEEmcHit containers removed.  Converters between StEEmcHit containers and
 * EEmcTree containers now provided by static functions in StEEmcTreeMaker.
 *
 * Revision 1.5  2012/06/01 21:26:07  sgliske
 * Removed dependancy on StEEmcHit (the converter is now part of
 * StEEmcTreeMaker) and removed dynamic arrays.
 *
 * Revision 1.4  2012/05/31 22:13:13  sgliske
 * working on MC
 *
 * Revision 1.3  2012/05/25 16:20:15  sgliske
 * ready for production (I hope)
 *
 * Revision 1.2  2012/05/25 03:19:00  sgliske
 * Removed TRef, replaced with index in TClonesArray
 *
 * Revision 1.1  2012/05/16 20:48:04  sgliske
 * moved from StEEmcTree to EEmcTreeContainers
 *
 * Revision 1.1  2012/05/15 20:52:47  sgliske
 * created more containers
 *
 *
 */
@


1.9
log
@updates
@
text
@d53 1
a53 1
 * $Id: EEmcHit.h,v 1.8 2012/06/14 05:03:50 sgliske Exp $
d55 3
@


1.8
log
@Removed TArrayS and TArrayF from EEmcSmdCluster and EEmcHit, as
they still contain dynamic arrays, and so things fail when using
TClonesArrays.  Now both use a static array.
@
text
@d44 1
a44 1
   Short_t usedTowerWeight[ kMaxNumTowers ];
d53 1
a53 1
 * $Id: EEmcHit.h,v 1.7 2012/06/01 22:10:48 sgliske Exp $
d55 5
@


1.7
log
@Updated to allow complilation with ACLiC outside of STAR framework
@
text
@d35 2
a36 2
   // some functions for interacting with the arrays for the towers
   // used in computing the energy for this hit.
d38 7
a44 13
   Int_t   getNumUsedTowers();
   Int_t   getCentralTowerIndex();
   Float_t getCentralTowerWeight();
   Int_t   getIndexOfUsedTower(  Int_t localIdx ); // get tower (global) index given the local index
   Float_t getWeightOfUsedTower( Int_t localIdx ); // get tower (global) weight given the local index

   // to fill the class from an StEEmcHit_t
   friend class StEEmcTreeMaker_t;

 protected:
   Int_t   localCentralTowerIdx;
   TArrayS usedTowerIndexArray;
   TArrayF usedTowerWeightArray;
d47 1
a47 1
   ClassDef( EEmcHit_t,1 );
a49 6
inline Int_t   EEmcHit_t::getNumUsedTowers(){ return usedTowerIndexArray.GetSize(); };
inline Int_t   EEmcHit_t::getCentralTowerIndex() { return usedTowerIndexArray.At( localCentralTowerIdx ); };
inline Float_t EEmcHit_t::getCentralTowerWeight(){ return usedTowerWeightArray.At( localCentralTowerIdx ); };
inline Int_t   EEmcHit_t::getIndexOfUsedTower ( Int_t localIdx ){ return usedTowerIndexArray.At( localIdx ); };
inline Float_t EEmcHit_t::getWeightOfUsedTower( Int_t localIdx ){ return usedTowerWeightArray.At( localIdx ); };

d53 1
a53 1
 * $Id: EEmcHit.h,v 1.6 2012/06/01 21:50:12 sgliske Exp $
d55 3
@


1.6
log
@Updated for overhaul of EEmcHit and EEmcCluster.  Both had dynamic arrays removed as well as
dependencies on StEEmcHit containers removed.  Converters between StEEmcHit containers and
EEmcTree containers now provided by static functions in StEEmcTreeMaker.
@
text
@d42 1
a42 1
   Int_t   getWeightOfUsedTower( Int_t localIdx ); // get tower (global) weight given the local index
d60 1
a60 1
inline Int_t   EEmcHit_t::getWeightOfUsedTower( Int_t localIdx ){ return usedTowerWeightArray.At( localIdx ); };
d65 1
a65 1
 * $Id: EEmcHit.h,v 1.5 2012/06/01 21:26:07 sgliske Exp $
d67 5
@


1.5
log
@Removed dependancy on StEEmcHit (the converter is now part of
StEEmcTreeMaker) and removed dynamic arrays.
@
text
@d17 2
d45 1
a45 1
   friend class StEEmcTreeMaker;
d49 1
a49 1
   TArrayI usedTowerIndexArray;
d56 5
a60 5
inline Int_t   EEmcSmdCluster_t::getNumUsedTowers(){ return usedTowerIndexArray.GetSize(); };
inline Int_t   EEmcSmdCluster_t::getCentralTowerIndex() { return usedTowerIndexArray.At( localCentralTowerIdx ); };
inline Float_t EEmcSmdCluster_t::getCentralTowerWeight(){ return usedTowerWeightArray.At( localCentralTowerIdx ); };
inline Int_t   EEmcSmdCluster_t::getIndexOfUsedTower ( Int_t localIdx ){ return usedTowerIndexArray.At( localIdx ); };
inline Int_t   EEmcSmdCluster_t::getWeightOfUsedTower( Int_t localIdx ){ return usedTowerWeightArray.At( localIdx ); };
d65 1
a65 1
 * $Id: EEmcHit.h,v 1.4 2012/05/31 22:13:13 sgliske Exp $
d67 4
@


1.4
log
@working on MC
@
text
@d4 5
a8 4
 * Description: Container used in the EEmcAnalysisTree.  Note: this does
 * not explicitly depend on the STAR framework, and so the trees can
 * be read outside of the STAR framework.  Note: data members are all
 * public, so as to faciliate directly drawing from the TTree.
a14 1
#include <assert.h>
a17 30
class EEmcEnergy_t;
class StEEmcHit_t;

class EEmcHitElement_t {
 public:
   EEmcHitElement_t();
   void Clear();

   Short_t idx;
   Float_t weight;
   Float_t eTow;     // already multiplied by weight--is cheaper to save energy than reference to the towers
   Float_t ePre1;    // already multiplied by weight--is cheaper to save energy than reference to the towers
   Float_t ePre2;    // already multiplied by weight--is cheaper to save energy than reference to the towers
   Float_t ePost;    // already multiplied by weight--is cheaper to save energy than reference to the towers

   void set( Short_t i, Float_t tE, Float_t p1E, Float_t p2E, Float_t poE, Float_t w = 1 );

 private:
   ClassDef( EEmcHitElement_t, 1 );
};

inline EEmcHitElement_t::EEmcHitElement_t() : idx(-1), weight(0), eTow(0), ePre1(0), ePre2(0), ePost(0) { /* */ };
inline void EEmcHitElement_t::set( Short_t i, Float_t w, Float_t tE, Float_t p1E, Float_t p2E, Float_t poE ){
   idx = i; weight = w; eTow = tE*w; ePre1 = p1E*w; ePre2 = p2E*w; ePost = poE*w; };

inline void EEmcHitElement_t::Clear(){
   idx = 0; weight = eTow = ePre1 = ePre2 = ePost = 0;
};


d21 1
a21 2
   EEmcHit_t( const EEmcEnergy_t& eemcEnergy, Int_t uClusIdx_, Int_t vClusIdx_, const StEEmcHit_t& other );
   ~EEmcHit_t();
d30 5
a34 1
   EEmcHitElement_t total;     // just sum of towers--later make non-persistant and recompute in streamer read
d36 13
a48 2
   Int_t nTowers;
   EEmcHitElement_t *tower;    //[nTowers]
d51 1
a51 1
   ClassDef( EEmcHit_t, 1 );
d54 5
a58 1
inline EEmcHit_t::EEmcHit_t() : nTowers(0), tower(0) { /* */ };
d63 1
a63 1
 * $Id: EEmcHit.h,v 1.3 2012/05/25 16:20:15 sgliske Exp $
d65 3
@


1.3
log
@ready for production (I hope)
@
text
@d11 1
a11 1
#ifndef EEmcHit_H__
d75 1
a75 1
 * $Id: EEmcHit.h,v 1.2 2012/05/25 03:19:00 sgliske Exp $
d77 3
@


1.2
log
@Removed TRef, replaced with index in TClonesArray
@
text
@d40 1
a40 1
inline void EEmcHitElement_t::set( Short_t i, Float_t tE, Float_t p1E, Float_t p2E, Float_t poE, Float_t w ){
d75 1
a75 1
 * $Id: EEmcHit.h,v 1.1 2012/05/16 20:48:04 sgliske Exp $
d77 3
@


1.1
log
@moved from StEEmcTree to EEmcTreeContainers
@
text
@a16 1
#include <TRef.h>
d51 1
a51 1
   EEmcHit_t( const EEmcEnergy_t& eemcEnergy, TRef uClus_, TRef vClus_, const StEEmcHit_t& other );
d56 1
a56 2
   TRef uClus;
   TRef vClus;
d75 1
a75 1
 * $Id: EEmcHit.h,v 1.1 2012/05/15 20:52:47 sgliske Exp $
d77 3
@

