head	1.13;
access;
symbols
	response:1.11;
locks; strict;
comment	@ * @;


1.13
date	2012.11.26.19.40.33;	author sgliske;	state dead;
branches;
next	1.12;

1.12
date	2012.05.17.18.04.25;	author sgliske;	state Exp;
branches;
next	1.11;

1.11
date	2012.03.26.21.05.35;	author sgliske;	state Exp;
branches;
next	1.10;

1.10
date	2012.03.26.21.04.13;	author sgliske;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.07.22.08.04;	author sgliske;	state Exp;
branches;
next	1.8;

1.8
date	2011.08.09.20.36.09;	author sgliske;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.20.21.35.26;	author sgliske;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.13.20.24.45;	author sgliske;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.12.21.48.44;	author sgliske;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.12.14.13.16;	author sgliske;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.11.15.14.31;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.07.20.53.04;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.05.21.48.19;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.13
log
@moved to official StEEmcPool
@
text
@/*!
 * \class StEEmcHitMaker_t
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * Generic basic class for hit finding.  Note, data intended for
 * serialization (i.e. saved to a TFile) is stored in the parent
 * StEEmcHitMakerData_t class.
 *
*/

#ifndef _ST_EEMC_HIT_MAKER_H_
#define _ST_EEMC_HIT_MAKER_H_

// StRoot inclusions
#include "StRoot/StEEmcUtil/EEmcGeom/EEmcGeomDefs.h"
#include "StMaker.h"

// containers
class EEmcEnergy_t;

// closely related inclusions
#include "StEEmcHit.h"
#include "StSimpleCluster.h"
#include "StESMDClustersPerSector.h"
#include "StEEmcHitMakerData.h"

class StEEmcHitMaker_t : public StMaker, public StEEmcHitMakerData_t {
 public:
   /// Construtor
   StEEmcHitMaker_t( const Char_t *myName, const Char_t *inputMkrName );  // inputMaker is for the EEmcEnergy_t pointer

   /// Deconstructor
   virtual ~StEEmcHitMaker_t();

   /// Initialize
   Int_t Init();

   /// Make (loads data, for children classes to use)
   Int_t Make();

   /// Clear for next event
   void  Clear(Option_t *opts="");

   /// modifiers

   /// Set which layers of tower to cluster.
   /// Slightly confusing since one "layer" of the tower is the sum of
   /// all layers.
   void doClusterTowers(     Bool_t flag = 1 ){ mDoClusterTower[ TOWER ] = flag; };
   void doClusterPreShower1( Bool_t flag = 1 ){ mDoClusterTower[ PRESHOWER1 ] = flag; };
   void doClusterPreShower2( Bool_t flag = 1 ){ mDoClusterTower[ PRESHOWER2 ] = flag; };
   void doClusterPostShower( Bool_t flag = 1 ){ mDoClusterTower[ POSTSHOWER ] = flag; };

   /// Set whether to cluster SMD strips
   void doClusterSMDStrips( Bool_t flag = 1 ){ mDoClusterSMDStrips = flag; };

   /// accessors
   Bool_t getIfClusteredTower( TowerLayer_t layer ) const;
   Bool_t getIfClusteredSMD() const { return mDoClusterSMDStrips; };

   Int_t getNumTowerClusters(){ return mTowerClusterVec[ TOWER ].size(); };
   Int_t getNumSMDClusters();

   // To access data storage
   static UInt_t convertToIndex( Int_t sec, Int_t sub, Int_t eta ){ return kEEmcNumEtas*( sec*kEEmcNumSubSectors + sub ) + eta; };
   static UInt_t convertToPhiBin( Int_t sec, Int_t sub ){ return sec*kEEmcNumSubSectors + sub; };

 protected:
   // regarding finding the response input
   Bool_t mInputIsTree;
   std::string mInputMakerName;
   EEmcEnergy_t *mEEmcEnergy;

   /// boolean flags
   Bool_t mDoClusterTower[ NUM_TOW_LAYERS ];
   Bool_t mDoClusterSMDStrips;
   Bool_t mConstructedOK;

   // Number of phi bins
   static const Int_t kEEmcNumPhiBins;

 private:
   ClassDef( StEEmcHitMaker_t, 1 );
};

#endif

/*
 * $Id: StEEmcHitMaker.h,v 1.12 2012/05/17 18:04:25 sgliske Exp $
 * 
 * $Log: StEEmcHitMaker.h,v $
 * Revision 1.12  2012/05/17 18:04:25  sgliske
 * Moving from EEmcResponse to EEmcTree
 *
 * Revision 1.11  2012/03/26 21:05:35  sgliske
 * general updates
 *
 * Revision 1.10  2012/03/26 21:04:13  sgliske
 * general updates
 *
 * Revision 1.9  2011/11/07 22:08:04  sgliske
 * daily update
 *
 * Revision 1.8  2011/08/09 20:36:09  sgliske
 * working on adding MC support to AnalysisTreeMaker
 *
 * Revision 1.7  2011/07/20 21:35:26  sgliske
 * update
 *
 * Revision 1.6  2011/07/13 20:24:45  sgliske
 * update
 *
 * Revision 1.5  2011/07/12 21:48:44  sgliske
 * working on implementing StEEmcResponse in other makers/classes
 *
 * Revision 1.4  2011/07/12 14:13:16  sgliske
 * update
 *
 * Revision 1.3  2011/07/11 15:14:31  sgliske
 * before making StHitData class
 *
 * Revision 1.2  2011/07/07 20:53:04  sgliske
 * update
 *
 * Revision 1.1  2011/07/05 21:48:19  sgliske
 * split from StEEmcAnalysisTreeMaker
 *
 * Revision 1.3  2011/07/01 21:44:24  sgliske
 * update
 *
 * Revision 1.2  2011/06/29 21:39:43  sgliske
 * update
 *
 * Revision 1.1  2011/06/23 21:55:05  sgliske
 * daily update
*/
@


1.12
log
@Moving from EEmcResponse to EEmcTree
@
text
@d89 1
a89 1
 * $Id: StEEmcHitMaker.h,v 1.11 2012/03/26 21:05:35 sgliske Exp $
d92 3
@


1.11
log
@general updates
@
text
@a15 2
#include "StRoot/StEEmcPool/StEEmcA2EMaker/StEEmcTower.h"
#include "StRoot/StEEmcPool/StEEmcA2EMaker/StEEmcStrip.h"
d18 2
a19 2
#include "StRoot/StEEmcPool/StEEmcResponseTreeMaker/StEEmcResponse.h"

d30 1
a30 3
   StEEmcHitMaker_t( const Char_t *myName,              // name of this maker in the StMaker hash table
                     const Char_t *responseMakerName ); // name of the maker in charge of setting the response
                                                        // (either an 'StEEmcResponseTreeReader_t' or an 'StEEmcA2EMaker')
d38 1
a38 1
   /// Make (used for loading data)
a64 2
   const StEEmcTower* getTowerPtr( TowerLayer_t layer, UInt_t index ) const;
   const StEEmcTower* getTowerPtr( TowerLayer_t layer, Int_t sec, Int_t sub, Int_t eta ) const { return getTowerPtr( layer, convertToIndex( sec, sub, eta ) ); };
d70 1
d72 1
a72 1
   StEEmcResponse_t *mResponsePtr;
a78 15
   /// data storage, if children classes request the conversion from
   /// StEEmcResponse_t to StEEmcTowerVec_t and StEEmcStripVec_t or if
   /// input is StEEmcA2EMaker.
   Bool_t mOwnHitElementPtrs;
   StEEmcTowerVec_t *mHitTowerPtr[ NUM_TOW_LAYERS ];
   StEEmcStripVec_t *mHitUStripPtr[ kEEmcNumSectors ];
   StEEmcStripVec_t *mHitVStripPtr[ kEEmcNumSectors ];

   // delete data storage for hit EEMC elements
   void DeleteHitElementVecs();

   // Convert from StEEmcResponse to StEEmcTowerVec_t and
   // StEEmcStripVec_t
   Int_t convertResponseToVec();

d89 1
a89 1
 * $Id: StEEmcHitMaker.h,v 1.10 2012/03/26 21:04:13 sgliske Exp $
d92 3
@


1.10
log
@general updates
@
text
@d29 1
a29 1
class StEEmcHitMaker_t : public virtual StMaker, public StEEmcHitMakerData_t {
d109 1
a109 1
 * $Id: StEEmcHitMaker.h,v 1.9 2011/11/07 22:08:04 sgliske Exp $
d112 3
@


1.9
log
@daily update
@
text
@d29 1
a29 1
class StEEmcHitMaker_t : public StMaker, public StEEmcHitMakerData_t {
d109 1
a109 1
 * $Id: StEEmcHitMaker.h,v 1.8 2011/08/09 20:36:09 sgliske Exp $
d112 3
@


1.8
log
@working on adding MC support to AnalysisTreeMaker
@
text
@d42 2
a43 2
   /// Make only defined for child classes
   //Int_t Make();
d109 1
a109 1
 * $Id: StEEmcHitMaker.h,v 1.7 2011/07/20 21:35:26 sgliske Exp $
d112 3
@


1.7
log
@update
@
text
@a30 2
   enum InputType_t { RESPONSE_TREE_READER, A2E_MAKER };

d32 3
a34 3
   StEEmcHitMaker_t( const Char_t *myName,             // name of this maker in the StMaker hash table
                     const Char_t *responseMakerName,  // name of the maker in charge of setting the resonse
                     InputType_t inputType );          // whether the response maker is a "response maker" or from the "tree reader"
a76 1
   InputType_t mInputType;
d109 1
a109 1
 * $Id: StEEmcHitMaker.h,v 1.6 2011/07/13 20:24:45 sgliske Exp $
d112 3
@


1.6
log
@update
@
text
@d71 1
a71 1
   const StEEmcTower* getTowerPtr( TowerLayer_t layer, Int_t index ) const { return &(mHitTowerPtr[ layer ]->at( index )); };
d73 2
a74 2
   static Int_t convertToIndex( Int_t sec, Int_t sub, Int_t eta ){ return kEEmcNumEtas*( sec*kEEmcNumSubSectors + sub ) + eta; };
   static Int_t convertToPhiBin( Int_t sec, Int_t sub ){ return sec*kEEmcNumSubSectors + sub; };
d112 1
a112 1
 * $Id: StEEmcHitMaker.h,v 1.5 2011/07/12 21:48:44 sgliske Exp $
d115 3
@


1.5
log
@working on implementing StEEmcResponse in other makers/classes
@
text
@d20 3
d31 1
a31 1
   enum InputType_t { RESPONSE_TREE_READER, RESPONSE_MAKER };
d70 6
d78 1
a78 1
   std::string mResponseMakerName;
d87 14
a100 1
   };
d102 2
a103 9
   /// data storage, if children classes request the conversion from
   /// StEEmcResponse_t to StEEmcTowerVec_t and StEEmcStripVec_t.
   StEEmcTowerVec_t mHitTowerPtr[ NUM_TOW_LAYERS ];
   StEEmcStripVec_t mHitUStripPtr[ kEEmcNumSectors ];
   StEEmcStripVec_t mHitVStripPtr[ kEEmcNumSectors ];

   /// Load the data from the A2E maker
   /// virtual to allow a child of this class to take different input
   virtual Int_t load();
d112 1
a112 1
 * $Id: StEEmcHitMaker.h,v 1.4 2011/07/12 14:13:16 sgliske Exp $
d115 3
@


1.4
log
@update
@
text
@d5 3
a7 1
 * Generic basic class for hit finding.
a15 1
#include "StRoot/StEEmcPool/StEEmcA2EMaker/StEEmcA2EMaker.h"
d28 2
d31 3
a33 4
   /// The "name" is for the ROOT hash table of classes
   /// Note: need to know the pointer for the A2E maker, as this is
   /// the source of input
   StEEmcHitMaker_t( const Char_t *name, StEEmcA2EMaker* mA2EMakerPtr_in );
d41 2
a42 2
   /// Find all the hits
   Int_t Make();
d68 4
a71 2
   /// A2EMaker pointer
   StEEmcA2EMaker* mA2EMakerPtr;
d78 7
a84 6
   /// pointers to input data storage
   /// note, since only keep pointers, no need to clear these.
   /// expect A2EMaker to take care of clearing
   StEEmcTowerVec_t *mHitTowerPtr[ NUM_TOW_LAYERS ];
   StEEmcStripVec_t *mHitUStripPtr[ kEEmcNumSectors ];
   StEEmcStripVec_t *mHitVStripPtr[ kEEmcNumSectors ];
d97 1
a97 1
 * $Id: StEEmcHitMaker.h,v 1.3 2011/07/11 15:14:31 sgliske Exp $
d100 3
@


1.3
log
@before making StHitData class
@
text
@a0 4
#ifndef _ST_EEMC_HITFINDER_H_
#define _ST_EEMC_HITFINDER_H_


d9 3
d23 1
d25 1
a25 1
class StEEmcHitMaker_t : public StMaker {
a26 4
   /// To keep track of layers of towers
   /// definition is consistant with EEMC A2EMaker
   enum TowerLayer_t { TOWER = 0, PRESHOWER1 = 1, PRESHOWER2 = 2, POSTSHOWER = 3, NUM_TOW_LAYERS = 4 };

d58 1
a58 13
   /// const accessors
   const StEEmcHitVec_t& getHitVec() const { return mHit; };
   const StSimpleClusterVec_t& getTowerClusterVec( TowerLayer_t layer ) const { return getTowerClusterVec(layer); };
   const StESMDClustersVec_t& getESMDClustersVec() const { return mESMDClusterVec; };

   /// non-const accessors
   StEEmcHitVec_t& getHitVec() { return mHit; };
   StSimpleClusterVec_t& getTowerClusterVec( TowerLayer_t layer );
   StESMDClustersVec_t& getESMDClustersVec() { return mESMDClusterVec; };

   //const StSimpleClusterVec_t& getStripClusterVec( Int_t idx ) const;
   //const StSimpleClusterVec_t& getStripClusterVec( Int_t sector, Bool_t getVplane ) const;

a60 1
   Int_t getHitVecSize() { return mHit.size(); };
d62 2
a63 9
   /// static member functions

   /// input is sector, plane
   /// output is index
   //static Int_t convertSMDSectorPlane2Index( Int_t sec, Int_t pln );

   /// input is index
   /// output is sector, plane
   //static void convertSMDIndex2SectorPlane( const Int_t idx, Int_t &sec, Int_t &pln );
a84 10
   /// Containers for cluster from each tower layer
   StSimpleClusterVec_t mTowerClusterVec[ NUM_TOW_LAYERS ];

   /// Containers for clusters from each SMD layer (U or V) and for
   /// each sector
   StESMDClustersVec_t mESMDClusterVec;

   /// Container for hits
   StEEmcHitVec_t mHit;

d92 1
a92 1
 * $Id: StEEmcHitMaker.h,v 1.2 2011/07/07 20:53:04 sgliske Exp $
d95 3
@


1.2
log
@update
@
text
@d77 1
d99 1
a99 1
   /// note, since only keep pointers, no need to clear
d126 1
a126 1
 * $Id: StEEmcHitMaker.h,v 1.1 2011/07/05 21:48:19 sgliske Exp $
d129 3
@


1.1
log
@split from StEEmcAnalysisTreeMaker
@
text
@d23 1
a23 6



// global (ug!) constant
const int kNumEEmcStripVecs = kEEmcNumSmdUVs*kEEmcNumSectors;

d62 1
a62 1
   /// accessors
d64 13
a76 3
   const StSimpleClusterVec_t& getTowerClusterVec( TowerLayer_t layer ) const;
   const StSimpleClusterVec_t& getStripClusterVec( Int_t idx ) const;
   const StSimpleClusterVec_t& getStripClusterVec( Int_t sector, Bool_t getVplane ) const;
d82 1
a82 1
   static Int_t convertSMDSectorPlane2Index( Int_t sec, Int_t pln );
d86 1
a86 1
   static void convertSMDIndex2SectorPlane( const Int_t idx, Int_t &sec, Int_t &pln );
d101 2
a102 1
   StEEmcStripVec_t *mHitStripPtr[ kNumEEmcStripVecs ];
d113 1
a113 1
   StSimpleClusterVec_t mStripClusterVec[ kNumEEmcStripVecs ];
d125 1
a125 1
 * $Id: StEEmcHitMaker.h,v 1.3 2011/07/01 21:44:24 sgliske Exp $
d128 3
@

