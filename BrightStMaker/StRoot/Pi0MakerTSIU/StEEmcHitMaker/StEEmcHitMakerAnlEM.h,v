head	1.14;
access;
symbols
	response:1.13;
locks; strict;
comment	@ * @;


1.14
date	2012.10.09.03.57.20;	author sgliske;	state dead;
branches;
next	1.13;

1.13
date	2011.12.06.22.36.35;	author sgliske;	state Exp;
branches;
next	1.12;

1.12
date	2011.11.11.23.01.53;	author sgliske;	state Exp;
branches;
next	1.11;

1.11
date	2011.11.11.21.28.23;	author sgliske;	state Exp;
branches;
next	1.10;

1.10
date	2011.11.10.23.33.33;	author sgliske;	state Exp;
branches;
next	1.9;

1.9
date	2011.11.08.22.22.15;	author sgliske;	state Exp;
branches;
next	1.8;

1.8
date	2011.11.07.22.08.04;	author sgliske;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.03.17.18.35;	author sgliske;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.02.22.04.45;	author sgliske;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.02.20.54.24;	author sgliske;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.26.21.37.35;	author sgliske;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.01.21.52.49;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2011.08.31.22.05.43;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.08.30.21.46.21;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.14
log
@removed unused makers
@
text
@/*!
 *
 * \class StEEmcHitMakerAnlEM_t
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * A conglomerate hit finder that uses an EM-type algorithm--actually
 * alternating between EM on the strips and EM on the towers.  This is
 * a holistic approach, rather than dividing the task into clustering,
 * point finding, and energy sharing.  The algorithm can be
 * initialized with any tower cluster finder algorithm, i.e. any
 * StEEmcTowerClusterFinder_t class.
 *
 * The basic steps are:
 * I) Initialize
 * II) Determine the strip energies
 * III) Split hits if needed
 * IV) Estimate the hit position
 * V) Determine the tower energies and total energy
 * VI) Merge hits
 * VII) check stopping critera and possibly return to step II.
 *
 */

#ifndef _EEMC_HIT_MAKER_ANL_EM_H_
#define _EEMC_HIT_MAKER_ANL_EM_H_

#include "StRoot/StEEmcPool/StEEmcPointMap/StEEmcPointMap.h"

/// Include related classes
#include "StEEmcHitMaker.h"
#include "StSimpleCluster.h"
#include "StEEmcHit.h"
#include "StEEmcAnlElement.h"
#include "StEEmcAnlHit.h"
#include "AnlEMPoint.h"
#include "StEEmcTowerClusterFinder.h"
class StEEmcAnlShowerShapeModel_t;
class StEEmcAnlSplitHitAlgo_t;


// the class
class StEEmcHitMakerAnlEM_t : public StEEmcHitMaker_t {
 public:
   /// Construtor
   StEEmcHitMakerAnlEM_t( const Char_t *myName,             // name of this maker in the StMaker hash table
                          const Char_t *responseMakerName,  // name of the keeper in charge of the response
                          StEEmcTowerClusterFinder_t* towerClusterFinder ); // for initalizing

   // do to: write copy constructor, eq. op.

   /// Deconstructor
   virtual ~StEEmcHitMakerAnlEM_t();

   /// Initialize
   Int_t Init();

   /// Find all the hits
   Int_t Make();

   /// Clear for next event
   void  Clear(Option_t *opts="");

   /// modifiers (setting parameters)
   void setStripInclDist( Float_t val ){ mStripInclDist = val; };
   void setTowerInclDist( Float_t val ){ mTowerInclDist = val; };
   void setStripMinWeight( Float_t val ){ mStripMinWeight = val; };
   void setTowerMinWeight( Float_t val ){ mTowerMinWeight = val; };
   void setMinHitDist( Float_t val ){ mMinHitDist = val; };
   void setMinHitEtoSplit( Float_t val ){ mMinHitEtoSplit = val; };
   void setMaxIters( Int_t val ){ mMaxIters = val; };
   void setMaxRenormIters( Int_t val ){ mMaxRenormIters = val; };
   void setTowerModel( StEEmcAnlShowerShapeModel_t& model ){ mTowerModelPtr = &model; };
   void setStripModel( StEEmcAnlShowerShapeModel_t& model ){ mStripModelPtr = &model; };
   void setSplitHitAlgo( StEEmcAnlSplitHitAlgo_t *algoPtr ){ mHitSplitterPtr = algoPtr; };
   void setMinIterSameNhits( Int_t val ){ mMinIterSameNhits = val; };
   void setMinNumStripsPerLayer( Int_t val ){ mMinNumStripsPerLayer = val; };

   // accessors
   Int_t getNumIters(){ return mIterNum; };

 protected:
   // function members
   Int_t init();
   Int_t updateEnergies( Bool_t doTowers );
   Int_t divideHits();
   Int_t estimatePositions();
   Int_t merge();
   Bool_t stop();
   Int_t convertAnlHitToEEmcHit();
   Float_t getStripDepositedEnergy( Int_t geoId ) const;
   Float_t getTowerDepositedEnergy( Int_t geoId ) const;
   void purgeElements( StEEmcAnlElementSet_t& hitElementSet, Float_t minE, Float_t& totE ) const;


   /// pointers to finders for initialization
   StEEmcTowerClusterFinder_t *mTowerClusterFinder;

   /// pointer to method for dividing hits
   StEEmcAnlSplitHitAlgo_t *mHitSplitterPtr;

   // vector of hits
   StEEmcAnlHitList_t mAnlHitList;   //!

   // sets to find total depositied energy in the strips/towers per
   // hit I.e., these is the actual measured values of energy
   // depositied in the EEMC
   StEEmcAnlElementSet_t mStripDepositedEnergy;
   StEEmcAnlElementSet_t mTowerDepositedEnergy;

   // parameters
   Float_t mStripInclDist;
   Float_t mStripMinWeight;
   Float_t mTowerInclDist;
   Float_t mTowerMinWeight;
   Float_t mMinHitDist;
   Float_t mMinHitEtoSplit;

   Int_t mMaxIters;
   Int_t mMaxRenormIters;
   Int_t mMinIterSameNhits;
   Int_t mMinNumStripsPerLayer;

   // for keeping track of things
   Int_t mIterNum;
   Int_t mIterSameNhits;
   Int_t mNhitsLastIter;

   // inner and outer radius, so do not have to compute every event
   Float_t mInnerRsq, mOuterRsq;

   // Shower Shape Models
   StEEmcAnlShowerShapeModel_t *mStripModelPtr;
   StEEmcAnlShowerShapeModel_t *mTowerModelPtr;

 private:
   ClassDef( StEEmcHitMakerAnlEM_t, 1 );
};

#endif

/*
 * $Id: StEEmcHitMakerAnlEM.h,v 1.13 2011/12/06 22:36:35 sgliske Exp $
 *
 * $Log: StEEmcHitMakerAnlEM.h,v $
 * Revision 1.13  2011/12/06 22:36:35  sgliske
 * update
 *
 * Revision 1.12  2011/11/11 23:01:53  sgliske
 * daily update
 *
 * Revision 1.11  2011/11/11 21:28:23  sgliske
 * daily update
 *
 * Revision 1.10  2011/11/10 23:33:33  sgliske
 * Re-arranged hit splitting & added new base class and algos
 *
 * Revision 1.9  2011/11/08 22:22:15  sgliske
 * daily update
 *
 * Revision 1.8  2011/11/07 22:08:04  sgliske
 * daily update
 *
 * Revision 1.7  2011/11/03 17:18:35  sgliske
 * it compiles
 *
 * Revision 1.6  2011/11/02 22:04:45  sgliske
 * update
 *
 * Revision 1.5  2011/11/02 20:54:24  sgliske
 * update
 *
 * Revision 1.4  2011/10/26 21:37:35  sgliske
 * Working on ANL EM Algo
 *
 * Revision 1.3  2011/09/01 21:52:49  sgliske
 * Working on ANL EM Algo -- still
 *
 * Revision 1.2  2011/08/31 22:05:43  sgliske
 * Working on ANL EM Algo
 *
 * Revision 1.1  2011/08/30 21:46:21  sgliske
 * creation
 *
 * 
 */
@


1.13
log
@update
@
text
@d142 1
a142 1
 * $Id: StEEmcHitMakerAnlEM.h,v 1.12 2011/11/11 23:01:53 sgliske Exp $
d145 3
@


1.12
log
@daily update
@
text
@d69 1
d116 1
d142 1
a142 1
 * $Id: StEEmcHitMakerAnlEM.h,v 1.11 2011/11/11 21:28:23 sgliske Exp $
d145 3
@


1.11
log
@daily update
@
text
@d75 1
d91 2
d119 1
d140 1
a140 1
 * $Id: StEEmcHitMakerAnlEM.h,v 1.10 2011/11/10 23:33:33 sgliske Exp $
d143 3
@


1.10
log
@Re-arranged hit splitting & added new base class and algos
@
text
@d74 4
d115 3
d119 2
d136 1
a136 1
 * $Id: StEEmcHitMakerAnlEM.h,v 1.9 2011/11/08 22:22:15 sgliske Exp $
d139 3
@


1.9
log
@daily update
@
text
@d38 2
a67 1
   void setMaxEigenvalue( Float_t val ){ mMaxEigenvalue = val; };
d73 1
a73 1

a79 1
   void getIntersectingPointSet( const StEEmcAnlHit_t& hit, AnlEMPointVec_t& pointVec, AnlEMPoint_t& mean );
d82 2
a83 2
   Bool_t stop();                                                        // write this one
   Int_t convertAnlHitToEEmcHit();                                       // write this one
d90 3
a104 1
   Float_t mMaxEigenvalue;
d113 3
a119 3
   // inner and outer radius, so do not have to compute every event
   Float_t mInnerRsq, mOuterRsq;

d127 1
a127 1
 * $Id: StEEmcHitMakerAnlEM.h,v 1.8 2011/11/07 22:08:04 sgliske Exp $
d130 3
@


1.8
log
@daily update
@
text
@d84 2
d125 1
a125 1
 * $Id: StEEmcHitMakerAnlEM.h,v 1.7 2011/11/03 17:18:35 sgliske Exp $
d128 3
@


1.7
log
@it compiles
@
text
@d113 3
d123 1
a123 1
 * $Id: StEEmcHitMakerAnlEM.h,v 1.6 2011/11/02 22:04:45 sgliske Exp $
d126 3
@


1.6
log
@update
@
text
@d69 4
a72 4
   //void setMaxRenormIters( Int_t val ){ mMaxRenormIters = val; };
   //void setStripDistFunc( TF1* func ){ mStripDistFunc = func; };
   //void setTowerDistFunc( TF1* func ){ mTowerDistFunc = func; };
   //void setPointDistFunc( TF1* func ){ mPointDistFunc = func; };
a74 3
   /// pointers to finders for initialization
   StEEmcTowerClusterFinder_t *mTowerClusterFinder;

d85 3
d107 1
a107 7
   //Int_t mMaxMinuitIters;
   //Float_t mMinuitTolerance;
   //Float_t mMinuitStepSize;
   //PointDistFunc_t *mPointDistanceFunc;

   // Minuit
   //TMinuit *mMinuit;
d120 1
a120 1
 * $Id: StEEmcHitMakerAnlEM.h,v 1.5 2011/11/02 20:54:24 sgliske Exp $
d123 3
@


1.5
log
@update
@
text
@d84 1
a84 1
   Int_t merge();                                                        // write this one
d126 1
a126 1
 * $Id: StEEmcHitMakerAnlEM.h,v 1.4 2011/10/26 21:37:35 sgliske Exp $
d129 3
@


1.4
log
@Working on ANL EM Algo
@
text
@d3 1
a3 1
 * \class EEmcHitMakerAnlEM_t
a26 3
#include <TF1.h>
#include <TMinuit.h>

d37 1
d81 1
a81 3
   Float_t TowIntegral( Short_t geoId, const StEEmcAnlHit_t& hitPtr );   // write this one
   Float_t SmdIntegral( Short_t geoId, const StEEmcAnlHit_t& hitPtr );   // write this one
   Int_t divideHits();                                                   // finish this one
d84 3
a86 5
   Int_t estimatePositionSingleSector( const StEEmcAnlElementPtrSet_t& stripSet, Float_t& x, Float_t& y );
   Int_t estimatePositionSplitSector( const StEEmcAnlHit_t& hit, Float_t& x, Float_t& y );
   Int_t merge();
   Bool_t stop();
   Int_t convertAnlHitToEEmcHit();
a99 1
   //TF1 *mStripDistFunc;
a102 1
   //TF1 *mTowerDistFunc;
d115 4
d126 1
a126 1
 * $Id: StEEmcHitMakerAnlEM.h,v 1.3 2011/09/01 21:52:49 sgliske Exp $
d129 3
@


1.3
log
@Working on ANL EM Algo -- still
@
text
@d16 3
a18 3
 * III) Estimate the hit position
 * IV) Determine the tower energies
 * V) Estimate the hit energy
d38 1
a40 1

d71 4
a74 3
   void setMaxRenormIters( Int_t val ){ mMaxRenormIters = val; };
   void setStripDistFunc( TF1* func ){ mStripDistFunc = func; };
   void setTowerDistFunc( TF1* func ){ mTowerDistFunc = func; };
d83 4
a86 1
   Int_t divideHits();
d97 3
a99 1
   // sets to find total depositied energy in the strips/towers per hit
d106 1
a106 1
   TF1 *mStripDistFunc;
d110 1
a110 1
   TF1 *mTowerDistFunc;
d112 1
d115 4
a118 3
   Int_t mMaxMinuitIters;
   Float_t mMinuitTolerance;
   Float_t mMinuitStepSize;
d121 1
a121 1
   TMinuit *mMinuit;
d130 1
a130 1
 * $Id: StEEmcHitMakerAnlEM.h,v 1.2 2011/08/31 22:05:43 sgliske Exp $
d133 3
@


1.2
log
@Working on ANL EM Algo
@
text
@d28 1
d49 2
d71 1
a71 1
   void setStripMaxRenormIters( Int_t val ){ mStripMaxRenormIters = val; };
d81 1
a81 1
   Int_t updateStripEnergies();
d84 2
a85 2
   Int_t updateTowerEnergies();
   Int_t estimateEnergy();
d107 4
a110 1
   Int_t mStripMaxRenormIters;
d112 2
a113 2
   // point map
   StEEmcPointMap_t mPointMap;   //!
d122 1
a122 1
 * $Id: StEEmcHitMakerAnlEM.h,v 1.1 2011/08/30 21:46:21 sgliske Exp $
d125 3
@


1.1
log
@creation
@
text
@d29 2
d32 1
a32 1
#include "StEEmcAnlElement.h"
d35 4
d41 1
a41 1
class StEEmcHitMakerAnlEM_t {
d67 2
d79 1
d85 1
a85 1
   Int_t convertAnlHitToEEmcHit;
d90 4
d103 5
d116 5
a120 1
 * $Id: $
a121 1
 * $Log:  $
@

