head	1.10;
access;
symbols
	response:1.9;
locks; strict;
comment	@ * @;


1.10
date	2012.11.26.19.40.36;	author sgliske;	state dead;
branches;
next	1.9;

1.9
date	2011.12.15.22.21.18;	author sgliske;	state Exp;
branches;
next	1.8;

1.8
date	2011.12.09.18.01.26;	author sgliske;	state Exp;
branches;
next	1.7;

1.7
date	2011.08.05.15.51.28;	author sgliske;	state Exp;
branches;
next	1.6;

1.6
date	2011.08.03.22.16.53;	author sgliske;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.22.16.33.06;	author sgliske;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.20.21.35.26;	author sgliske;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.12.19.14.36;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.12.14.13.16;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.05.21.48.20;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.10
log
@moved to official StEEmcPool
@
text
@/*!
 * \class StSimpleCluster_t
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * The basic information needed to define a cluster:
 *  - an ID for the cluster
 *  - an array of indices of elements
 *  - an array of weights for the elements
 *
 * This class is designed to be light weight and is optimized for
 * using minimal storage space, i.e. so it can be easily and compactly
 * saved as part of a TTree in a TFile.  Note: all functions are
 * inlined and default copy constructors, equal operators, and
 * deconstructors are used.
 *
 * Note: the total energy of the cluster is not saved, as it can be
 * reconstructed from the members.  Only information that can not be
 * computed is stored.
 * 
 * Note: I changed my mind. :).  It is difficult to go back and
 * compute E later, as one needs the A2EMaker, etc.  So energy will be
 * stored here.
 *
*/

#ifndef _ST_SIMPLE_CLUSTER_H_
#define _ST_SIMPLE_CLUSTER_H_

#include <TObject.h>
#include <Rtypes.h>
#include <TArrayS.h>
#include <TArrayF.h>
#include <iostream>
#include <vector>
#include <list>

//#include "StRoot/St_base/StMessMgr.h"

//#define ClassDefVec( CLASS );

/// Forward declaration
class StSimpleCluster_t;

/// Containers
typedef std::vector< StSimpleCluster_t > StSimpleClusterVec_t;
typedef std::list< StSimpleCluster_t > StSimpleClusterList_t;

// force RootCint.pl to make vector dictionary
// ClassDefVec( StSimpleCluster_t );

/// The class
class StSimpleCluster_t : public TObject {
 public:
   // constructor
   StSimpleCluster_t( Short_t mID_in = -1 ) : mID( mID_in ), mSeedIdx(0) { /* */ };
   ~StSimpleCluster_t() { /* */ };

   // accessors
   Short_t getID() const { return mID; };
   Float_t getEnergy() const { return mE; };

   TArrayS& getMemberArray() { return mMember; };
   const TArrayS& getMemberArray() const { return mMember; };
   Short_t getMember( Int_t i ) const { return mMember[i]; };

   TArrayF& getWeightArray() { return mWeight; };
   const TArrayF& getWeightArray() const { return mWeight; };
   Float_t getWeight( Int_t i ) const { return mWeight[i]; };
      
   Int_t getSeedIdx() const { return mSeedIdx; };  // the index of these seed in the internal Member and Weight arrays

   Int_t getSeedMember() const { return mSeedIdx < mMember.GetSize() ? mMember[mSeedIdx] : -1; };
   Int_t getSeedWeight() const { return mSeedIdx < mWeight.GetSize() ? mWeight[mSeedIdx] : -1; };

   Float_t getMeanX() const { return mMeanX; };   // used for both tower and strip clusters
   Float_t getMeanY() const { return mMeanY; };   // only used for tower clusters


   // modifiers
   void setID( const Short_t ID ) { mID =  ID; };
   void setEnergy( const Float_t E ) { mE =  E; };
   void setMemberArray( const TArrayS array ){ mMember = array; };
   void setWeightArray( const TArrayF array ){ mWeight = array; };
   void setSeedIdx( Int_t seedIdx ) { mSeedIdx = seedIdx; };
   void setMeanX( Float_t mean ){ mMeanX = mean; };   // used for both tower and strip clusters
   void setMeanY( Float_t mean ){ mMeanY = mean; };   // only used for tower clusters

   // operators
   StSimpleCluster_t& operator+=(  const StSimpleCluster_t& other );
   //   Bool_t operator <(const StSimpleCluster_t& b) const {
   //      return mID < b.mID;
   //   };

   // for display
   friend std::ostream &operator<<( std::ostream &out, const StSimpleCluster_t &clus );

 protected:
   Short_t mID;
   Float_t mE, mMeanX, mMeanY;
   TArrayS mMember;
   TArrayF mWeight;

   // keep track of which (if any) of the members is the seed.
   // defaults to 0.
   Int_t mSeedIdx;

 private:
   /// Make class available to root
   ClassDef(StSimpleCluster_t,1);   // Simplest class to describe a cluster


};

std::ostream &operator<<( std::ostream &out, const StSimpleCluster_t &clus );

#endif

/*
 * $Id: StSimpleCluster.h,v 1.9 2011/12/15 22:21:18 sgliske Exp $
 *
 * $Log: StSimpleCluster.h,v $
 * Revision 1.9  2011/12/15 22:21:18  sgliske
 * update
 *
 * Revision 1.8  2011/12/09 18:01:26  sgliske
 * update
 *
 * Revision 1.7  2011/08/05 15:51:28  sgliske
 * bug fix
 *
 * Revision 1.6  2011/08/03 22:16:53  sgliske
 * still debugging
 *
 * Revision 1.5  2011/07/22 16:33:06  sgliske
 * update
 *
 * Revision 1.4  2011/07/20 21:35:26  sgliske
 * update
 *
 * Revision 1.3  2011/07/12 19:14:36  sgliske
 * StEEmcResponseTreeMaker working
 *
 * Revision 1.2  2011/07/12 14:13:16  sgliske
 * update
 *
 * Revision 1.1  2011/07/05 21:48:20  sgliske
 * split from StEEmcAnalysisTreeMaker
 *
 * Revision 1.4  2011/07/01 21:44:24  sgliske
 * update
 *
 * Revision 1.3  2011/06/29 16:37:59  sgliske
 * update
 *
 * Revision 1.2  2011/06/24 17:32:33  sgliske
 * Everything now compiles using cons
 *
 * Revision 1.1  2011/06/23 21:55:05  sgliske
 * daily update
 *
 */
@


1.9
log
@update
@
text
@d119 1
a119 1
 * $Id: StSimpleCluster.h,v 1.8 2011/12/09 18:01:26 sgliske Exp $
d122 3
@


1.8
log
@update
@
text
@a115 1

d119 1
a119 1
 * $Id: StSimpleCluster.h,v 1.7 2011/08/05 15:51:28 sgliske Exp $
d122 3
@


1.7
log
@bug fix
@
text
@d34 2
d46 1
d69 1
a69 1

d89 1
d120 1
a120 1
 * $Id: StSimpleCluster.h,v 1.6 2011/08/03 22:16:53 sgliske Exp $
d123 3
@


1.6
log
@still debugging
@
text
@d35 2
d116 1
a116 1
 * $Id: StSimpleCluster.h,v 1.5 2011/07/22 16:33:06 sgliske Exp $
d119 3
@


1.5
log
@update
@
text
@d70 4
d80 2
d93 1
a93 1
   Float_t mE;
d110 1
d114 1
a114 1
 * $Id: StSimpleCluster.h,v 1.4 2011/07/20 21:35:26 sgliske Exp $
d117 3
@


1.4
log
@update
@
text
@d106 29
a134 25
// $Id: StSimpleCluster.h,v 1.3 2011/07/12 19:14:36 sgliske Exp $
//
// $Log: StSimpleCluster.h,v $
// Revision 1.3  2011/07/12 19:14:36  sgliske
// StEEmcResponseTreeMaker working
//
// Revision 1.2  2011/07/12 14:13:16  sgliske
// update
//
// Revision 1.1  2011/07/05 21:48:20  sgliske
// split from StEEmcAnalysisTreeMaker
//
// Revision 1.4  2011/07/01 21:44:24  sgliske
// update
//
// Revision 1.3  2011/06/29 16:37:59  sgliske
// update
//
// Revision 1.2  2011/06/24 17:32:33  sgliske
// Everything now compiles using cons
//
// Revision 1.1  2011/06/23 21:55:05  sgliske
// daily update
//
// S. Gliske, last updated June, 2011
@


1.3
log
@StEEmcResponseTreeMaker working
@
text
@d33 1
d65 4
a68 3
   Int_t getSeedIdx() const { return mSeedIdx; };
   Int_t getSeedMember() const { return mMember.At(mSeedIdx); };
   Int_t getSeedWeight() const { return mWeight.At(mSeedIdx); };
d82 3
d102 2
d106 1
a106 1
// $Id: StSimpleCluster.h,v 1.2 2011/07/12 14:13:16 sgliske Exp $
d109 3
@


1.2
log
@update
@
text
@d34 1
a34 1
#define ClassDefVec( CLASS );
d43 1
a43 1
ClassDefVec( StSimpleCluster_t );
d99 1
a99 1
// $Id: StSimpleCluster.h,v 1.1 2011/07/05 21:48:20 sgliske Exp $
d102 3
@


1.1
log
@split from StEEmcAnalysisTreeMaker
@
text
@d29 1
d34 1
d42 3
d46 1
a46 1
class StSimpleCluster_t {
d94 1
d99 1
a99 1
// $Id: StSimpleCluster.h,v 1.4 2011/07/01 21:44:24 sgliske Exp $
d102 3
@

