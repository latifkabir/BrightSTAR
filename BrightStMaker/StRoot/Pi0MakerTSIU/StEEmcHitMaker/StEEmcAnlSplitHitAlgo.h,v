head	1.4;
access;
symbols
	response:1.3;
locks; strict;
comment	@ * @;


1.4
date	2012.10.09.03.57.19;	author sgliske;	state dead;
branches;
next	1.3;

1.3
date	2011.12.06.22.36.35;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.11.04.15.36;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.10.23.33.33;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.4
log
@removed unused makers
@
text
@/*!
 *
 * \class StEEmcAnlSplitHitAlgo_t
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * Abstract base class for algorithm to check if any hits need splitting
 *
 */

#ifndef _EEMC_ANL_SPLIT_HIT_ALGO_H_
#define _EEMC_ANL_SPLIT_HIT_ALGO_H_

#include "Stypes.h"
class StEEmcAnlHit_t;
class AnlEMPoint_t;

// the class
class StEEmcAnlSplitHitAlgo_t {
 public:
   /// Construtor, deconstructor
   StEEmcAnlSplitHitAlgo_t();
   virtual ~StEEmcAnlSplitHitAlgo_t();

   // default copy constructor, eq. op. OK

   /// Initialize
   virtual Int_t Init();

   /// Find all the hits
   virtual Int_t splitHit( const StEEmcAnlHit_t& hit, Bool_t& doSplit, Bool_t& doInvalidate, AnlEMPoint_t& point1, AnlEMPoint_t& point2 ) = 0;

   // Query uncertainy in u and v layers, if available
   // Returns error if not implemented.
   Int_t getUncert( Int_t& sector, Float_t& u1hitUncert, Float_t& v1hitUncert, Float_t& u2hitUncert, Float_t& v2hitUncert ) const;

   /// Clear for next event
   virtual void Clear(Option_t *opts="");

 private:

};

// inline functions

inline StEEmcAnlSplitHitAlgo_t::StEEmcAnlSplitHitAlgo_t(){ /* */ };
inline StEEmcAnlSplitHitAlgo_t::~StEEmcAnlSplitHitAlgo_t(){ /* */ };
inline Int_t StEEmcAnlSplitHitAlgo_t::Init(){ return kStOk; };
inline void StEEmcAnlSplitHitAlgo_t::Clear( Option_t *opts ){ /* */ };
inline Int_t StEEmcAnlSplitHitAlgo_t::getUncert( Int_t& sector, Float_t& u1hitUncert, Float_t& v1hitUncert, Float_t& u2hitUncert, Float_t& v2hitUncert ) const { return kStWarn; };

#endif

/*
 * $Id: StEEmcAnlSplitHitAlgo.h,v 1.3 2011/12/06 22:36:35 sgliske Exp $
 *
 * $Log: StEEmcAnlSplitHitAlgo.h,v $
 * Revision 1.3  2011/12/06 22:36:35  sgliske
 * update
 *
 * Revision 1.2  2011/11/11 04:15:36  sgliske
 * update: it compiles!
 *
 * Revision 1.1  2011/11/10 23:33:33  sgliske
 * Re-arranged hit splitting & added new base class and algos
 *
 * 
 */
@


1.3
log
@update
@
text
@d54 1
a54 1
 * $Id: StEEmcAnlSplitHitAlgo.h,v 1.2 2011/11/11 04:15:36 sgliske Exp $
d57 3
@


1.2
log
@update: it compiles!
@
text
@d32 4
d49 1
d54 1
a54 1
 * $Id: StEEmcAnlSplitHitAlgo.h,v 1.1 2011/11/10 23:33:33 sgliske Exp $
d57 3
@


1.1
log
@Re-arranged hit splitting & added new base class and algos
@
text
@d30 1
a30 1
   virtual Int_t splitHit( const StEEmcAnlHit_t& hit, Bool_t& doSplit, AnlEMPoint_t& point1, AnlEMPoint_t& point2 ) = 0;
d49 5
a53 1
 * $Id: $
a54 1
 * $Log: $
@

