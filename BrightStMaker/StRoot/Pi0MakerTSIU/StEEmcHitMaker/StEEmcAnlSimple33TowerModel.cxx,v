head	1.3;
access;
symbols
	response:1.2;
locks; strict;
comment	@// @;


1.3
date	2012.10.09.03.57.19;	author sgliske;	state dead;
branches;
next	1.2;

1.2
date	2011.11.07.22.08.04;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.03.20.09.17;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.3
log
@removed unused makers
@
text
@/*!
 *
 * \class StEEmcAnlSimple33TowerModel_t
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * See header for description.
 *
 */

#include "Rtypes.h"
#include "StEEmcAnlShowerShapeModel.h"
#include "StEEmcAnlSimple33TowerModel.h"
#include "StRoot/St_base/StMessMgr.h"
#include "StRoot/StEEmcUtil/EEmcGeom/EEmcGeomSimple.h"
#include "StRoot/StEEmcUtil/EEmcGeom/EEmcGeomDefs.h"
#include "StRoot/StEEmcPool/StEEmcGeoId/StEEmcGeoId.h"

#include "StEEmcAnlHit.h"

// constructor
StEEmcAnlSimple33TowerModel_t::StEEmcAnlSimple33TowerModel_t() : StEEmcAnlShowerShapeModel_t(), mWeightFunc(0), mFactorR(1), mFactorPhi(1) { /* */ };

// deconstructor
StEEmcAnlSimple33TowerModel_t::~StEEmcAnlSimple33TowerModel_t(){ /* */ };

/// Initialize
Int_t StEEmcAnlSimple33TowerModel_t::Init(){
   Int_t ierr = kStOk;

   if( !mWeightFunc ){
      LOG_FATAL << "Pointer to weight function is null" << endm;
      ierr = kStFatal;
   };

   if( !ierr && mWeightFunc->IsZombie() ){
      LOG_FATAL << "Weight function is a zombie" << endm;
      ierr = kStFatal;
   };

   return ierr;
};

// get energy
Float_t StEEmcAnlSimple33TowerModel_t::getEnergyFromHitIntoElement( const StEEmcAnlHit_t& hit, Short_t geoId ){
   EEmcGeomSimple &geom = EEmcGeomSimple::Instance();

   // Get tower for the hit
   Float_t Z = geom.getZMean();
   TVector3 r( hit.getX(), hit.getY(), Z );

   Int_t hitSector, hitSubSector, hitEtaBin;
   Float_t deta, dphi;
   geom.getTower( r, hitSector, hitSubSector, hitEtaBin, dphi, deta );
   Int_t hitPhiBin = kEEmcNumSubSectors*hitSector + hitSubSector;

   Short_t towPhiBin, towEtaBin;
   // get hitSector, subhitSector, and eta bin of tower in question
   StEEmcGeoId_t::decodeTow( geoId, towPhiBin, towEtaBin );

   Float_t totalWeight = 0;
   if( towPhiBin == hitPhiBin && towEtaBin == hitEtaBin ){
      // same tower
      totalWeight = 1;

   } else if( TMath::Abs( towPhiBin - hitPhiBin ) < 2 || TMath::Abs( towEtaBin - hitEtaBin ) < 2 ){

      // get range of tower
      Float_t meanEta = geom.getEtaMean( hitEtaBin );
      Float_t halfWidthEta = geom.getEtaHalfWidth( hitEtaBin );
      Float_t meanPhi = geom.getPhiMean( hitSector, hitSubSector );
      Float_t halfWidthPhi = geom.getPhiHalfWidth( hitSector, hitSubSector );

      // init weights
      Float_t phiWeight = 1, rWeight = 1;

      // update phi weight
      if( towPhiBin < hitPhiBin ){
         Float_t phiLow = meanPhi - halfWidthPhi;
         Float_t arg = (r.Phi() - phiLow);          // delta phi
         arg *= r.Perp();                           // now is distance from edge in units of [cm.]
         arg /= mFactorPhi;                         // scaled by the factor
         phiWeight = mWeightFunc->Eval( arg );
      } else if( towPhiBin > hitPhiBin ){
         Float_t phiHigh = meanPhi - halfWidthPhi;
         Float_t arg = (phiHigh - r.Phi());          // fractional position in phi
         arg *= r.Perp();                           // now is distance from edge in units of [cm.]
         arg /= mFactorPhi;                         // scaled by the factor
         phiWeight = mWeightFunc->Eval( arg );
      };

      // update eta weight
      if( towEtaBin < hitEtaBin ){
         Float_t rLow = Z/TMath::SinH( meanEta+halfWidthEta );
         Float_t arg = (r.Perp() - rLow);            // fractional position in r
         arg /= mFactorR;                         // scaled by the factor
         rWeight = mWeightFunc->Eval( arg );
      } else if( towEtaBin > hitEtaBin ){
         Float_t rHigh = Z/TMath::SinH( meanEta-halfWidthEta );
         Float_t arg = (rHigh - r.Perp());           // fractional position in r
         arg /= mFactorR;                         // scaled by the factor
         rWeight = mWeightFunc->Eval( arg );
      };

      totalWeight = rWeight*phiWeight;
   };

   return totalWeight;
};


ClassImp( StEEmcAnlSimple33TowerModel_t );

/*
 * $Id: StEEmcAnlSimple33TowerModel.cxx,v 1.2 2011/11/07 22:08:04 sgliske Exp $
 * $Log: StEEmcAnlSimple33TowerModel.cxx,v $
 * Revision 1.2  2011/11/07 22:08:04  sgliske
 * daily update
 *
 * Revision 1.1  2011/11/03 20:09:17  sgliske
 * creation
 *
 * 
 */
@


1.2
log
@daily update
@
text
@d114 1
a114 1
 * $Id: StEEmcAnlSimple33TowerModel.cxx,v 1.1 2011/11/03 20:09:17 sgliske Exp $
d116 3
@


1.1
log
@creation
@
text
@d21 1
a21 1
StEEmcAnlSimple33TowerModel_t::StEEmcAnlSimple33TowerModel_t() : mWeightFunc(0), mFactorR(1), mFactorPhi(1) { /* */ };
d114 5
a118 2
 * $Id: $
 * $Log: $
@

