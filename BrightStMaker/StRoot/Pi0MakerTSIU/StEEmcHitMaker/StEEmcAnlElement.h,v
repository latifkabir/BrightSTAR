head	1.9;
access;
symbols
	response:1.8;
locks; strict;
comment	@ * @;


1.9
date	2012.10.09.03.57.19;	author sgliske;	state dead;
branches;
next	1.8;

1.8
date	2011.12.15.22.21.18;	author sgliske;	state Exp;
branches;
next	1.7;

1.7
date	2011.11.23.17.55.44;	author sgliske;	state Exp;
branches;
next	1.6;

1.6
date	2011.11.09.23.12.31;	author sgliske;	state Exp;
branches;
next	1.5;

1.5
date	2011.11.02.22.04.45;	author sgliske;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.02.20.54.24;	author sgliske;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.01.21.52.49;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2011.08.31.22.05.42;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.08.30.21.46.21;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.9
log
@removed unused makers
@
text
@/*!
 *
 * \class StEEmcAnlElement_t
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * Element container for the StEEmcAnlHit_t class. Includes geoId of
 * the element and the energy of the element.
 *
 */

#ifndef _ST_EEMC_ANL_ELEMENT_H_
#define _ST_EEMC_ANL_ELEMENT_H_

#include <set>
#include <vector>
#include <Rtypes.h>

// forward declaration
class StEEmcAnlElement_t;

// collection
typedef std::set< StEEmcAnlElement_t > StEEmcAnlElementSet_t;
typedef std::set< const StEEmcAnlElement_t* > StEEmcAnlElementPtrSet_t;
typedef std::vector< const StEEmcAnlElement_t* > StEEmcAnlElementPtrVec_t;

// the class
class StEEmcAnlElement_t {
 public:
   /// Construtor
   StEEmcAnlElement_t() : mGeoId(-1), mEnergy(-1) { /* */ };
   StEEmcAnlElement_t( Short_t id, Float_t e ) : mGeoId(id), mEnergy(e) { /* */ };
   StEEmcAnlElement_t( const StEEmcAnlElement_t& rhs ) : mGeoId( rhs.mGeoId ), mEnergy( rhs.mEnergy ) { /* */ };

   /// Deconstructor
   ~StEEmcAnlElement_t(){ /* */ };

   // operators
   StEEmcAnlElement_t& operator=( const StEEmcAnlElement_t& rhs );
   Bool_t operator==( const StEEmcAnlElement_t& rhs ) const { return mGeoId == rhs.mGeoId; };
   StEEmcAnlElement_t& operator+=( const StEEmcAnlElement_t& rhs ){ mEnergy += rhs.mEnergy; return *this; };
   Bool_t operator<( const StEEmcAnlElement_t& rhs ) const { return mGeoId < rhs.mGeoId; };
   static Bool_t isNotPositive( const StEEmcAnlElement_t& element ){ return element.mEnergy <= 0; };

   // accessors
   Float_t getEnergy() const { return mEnergy; };
   Short_t getGeoId() const { return mGeoId; };


   // modifiers
   void setEnergy( Float_t E ){ mEnergy = E; };
   void setGeoId( Short_t id ){ mGeoId = id; };
   void set( Short_t id, Float_t E ){ mGeoId = id; mEnergy = E; };
   Float_t* getEnergyPtr(){ return &mEnergy; };

   // static member function to use std::remove_if
   static Bool_t notPositiveEnergy( StEEmcAnlElement_t element ){ return (element.mEnergy <= 0); };

   // static member function to scale set
   static void scaleSet( StEEmcAnlElementSet_t &elemSet, Float_t w );

 protected:
   Short_t mGeoId;
   Float_t mEnergy;

 private:
   ClassDef( StEEmcAnlElement_t, 1 );
};

// longer inline functions

inline StEEmcAnlElement_t& StEEmcAnlElement_t::operator=( const StEEmcAnlElement_t& rhs ){
   mEnergy = rhs.mEnergy;
   mGeoId = rhs.mGeoId;

   return *this;
};

#endif

/*
 * $Id: StEEmcAnlElement.h,v 1.8 2011/12/15 22:21:18 sgliske Exp $
 *
 * $Log: StEEmcAnlElement.h,v $
 * Revision 1.8  2011/12/15 22:21:18  sgliske
 * update
 *
 * Revision 1.7  2011/11/23 17:55:44  sgliske
 * update
 *
 * Revision 1.6  2011/11/09 23:12:31  sgliske
 * daily update
 *
 * Revision 1.5  2011/11/02 22:04:45  sgliske
 * update
 *
 * Revision 1.4  2011/11/02 20:54:24  sgliske
 * update
 *
 * Revision 1.3  2011/09/01 21:52:49  sgliske
 * Working on ANL EM Algo -- still
 *
 * Revision 1.2  2011/08/31 22:05:42  sgliske
 * Working on ANL EM Algo
 *
 * Revision 1.1  2011/08/30 21:46:21  sgliske
 * creation
 *
 * 
 */
@


1.8
log
@update
@
text
@d81 1
a81 1
 * $Id: StEEmcAnlElement.h,v 1.7 2011/11/23 17:55:44 sgliske Exp $
d84 3
@


1.7
log
@update
@
text
@d58 1
a58 1
   // static member function to clear set
d81 1
a81 1
 * $Id: StEEmcAnlElement.h,v 1.6 2011/11/09 23:12:31 sgliske Exp $
d84 3
@


1.6
log
@daily update
@
text
@d58 3
d81 1
a81 1
 * $Id: StEEmcAnlElement.h,v 1.5 2011/11/02 22:04:45 sgliske Exp $
d84 3
@


1.5
log
@update
@
text
@d42 1
a42 1

d78 1
a78 1
 * $Id: StEEmcAnlElement.h,v 1.4 2011/11/02 20:54:24 sgliske Exp $
d81 3
@


1.4
log
@update
@
text
@d40 1
d78 1
a78 1
 * $Id: StEEmcAnlElement.h,v 1.3 2011/09/01 21:52:49 sgliske Exp $
d81 3
@


1.3
log
@Working on ANL EM Algo -- still
@
text
@d15 1
d24 1
d77 1
a77 1
 * $Id: StEEmcAnlElement.h,v 1.2 2011/08/31 22:05:42 sgliske Exp $
d80 3
@


1.2
log
@Working on ANL EM Algo
@
text
@d22 1
d43 1
a43 1
   Float_t getGeoId() const { return mGeoId; };
d75 1
a75 1
 * $Id: StEEmcAnlElement.h,v 1.1 2011/08/30 21:46:21 sgliske Exp $
d78 3
@


1.1
log
@creation
@
text
@d15 1
d27 3
a29 2
   StEEmcAnlElement_t();
   StEEmcAnlElement_t( const StEEmcAnlElement_t& rhs );
d32 1
a32 1
   virtual ~StEEmcAnlElement_t();
d36 3
a38 2
   Bool_t operator==( const StEEmcAnlElement_t& rhs );
   Bool_t operator<( const StEEmcAnlElement_t& rhs );
d44 1
d49 4
d62 9
d74 5
a78 1
 * $Id: $
a79 1
 * $Log:  $
@

