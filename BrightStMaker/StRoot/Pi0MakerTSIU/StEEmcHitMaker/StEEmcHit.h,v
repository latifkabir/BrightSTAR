head	1.11;
access;
symbols
	response:1.9;
locks; strict;
comment	@ * @;


1.11
date	2012.11.26.19.40.33;	author sgliske;	state dead;
branches;
next	1.10;

1.10
date	2012.06.01.21.50.13;	author sgliske;	state Exp;
branches;
next	1.9;

1.9
date	2012.03.07.22.30.46;	author sgliske;	state Exp;
branches;
next	1.8;

1.8
date	2011.08.18.15.48.38;	author sgliske;	state Exp;
branches;
next	1.7;

1.7
date	2011.08.09.20.36.09;	author sgliske;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.28.22.04.59;	author sgliske;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.25.21.40.29;	author sgliske;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.20.21.35.26;	author sgliske;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.12.19.14.36;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.12.14.13.15;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.05.21.48.19;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.11
log
@moved to official StEEmcPool
@
text
@/*!
 *
 * \class StEEmcHit_t
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * Additional information to describe a hit, more than that in StSimpleHit.
 *
 * Note: most functions are inlined and default copy constructors,
 * equal operators, and deconstructors are used.
 *
 * WARNING: TODO: if allow hits with u and v not in the same sector,
 * will need to update this!!!
*/

#ifndef _ST_EEMC_HIT_H_
#define _ST_EEMC_HIT_H_

#include <iostream>
#include <TArrayS.h>
#include <TArrayF.h>

#include "StSimpleHit.h"

/// Forward declaration
class StEEmcHit_t;

/// Containers
typedef std::vector< StEEmcHit_t > StEEmcHitVec_t;
typedef std::vector< StEEmcHit_t* > StEEmcHitPtrVec_t;

//#define ClassDefVec( CLASS );

// force RootCint.pl to make vector dictionary
//ClassDefVec( StEEmcHit_t );

/// The class
class StEEmcHit_t : public StSimpleHit_t {
 public:
   // constructor
   StEEmcHit_t( Short_t ID_in = -1 ) : StSimpleHit_t( ID_in ), mSector(-1), mClusIDu(-1), mClusIDv(-1), mTowerIdx(-1), mEnergyU(-1), mEnergyV(-1),
      mTtest2(1e100), mWeightU(1), mWeightV(1), mIsValid(1) { /* */ };
   ~StEEmcHit_t(){ /* */ };

   // enum
   // enum PidType_t { PHOTON = 0, LEPTON = 1, HADRON = 2 };

   // accessors
   Short_t getSector() const { return mSector; };
   Short_t getClusIDu() const { return mClusIDu; };
   Short_t getClusIDv() const { return mClusIDv; };
   Int_t getTowerIdx() const { return mTowerIdx; };
   Float_t getEnergyU() const { return mEnergyU; };
   Float_t getEnergyV() const { return mEnergyV; };
   Float_t getTtest2() const { return mTtest2; };
   Float_t getWeightU() const { return mWeightU; };
   Float_t getWeightV() const { return mWeightV; };
   Bool_t isValid() const { return mIsValid; };
   Int_t getNumUsedTowers() const { return mUsedTowerIndices.GetSize(); };
   //PidType_t getPid() const { return mPid; };

   // not yet programmed, but allow interface
   Short_t getSectorU() const { return mSector; };
   Short_t getSectorV() const { return mSector; };

   // note: TArray::At does bounds checking
   Short_t getUseTowerIndex( Int_t localIndex ) const { return mUsedTowerIndices.At( localIndex ); };
   Float_t getUseTowerWeight( Int_t localIndex ) const { return mUsedTowerWeights.At( localIndex ); };

   // modifiers
   void setSector( Short_t sec ){ mSector = sec; };
   void setClusIDu( Short_t idx ){ mClusIDu = idx; };
   void setClusIDv( Short_t idx ){ mClusIDv = idx; };
   void setTowerIdx( Int_t idx ){ mTowerIdx = idx; };
   void setEnergyU( Float_t E ) { mEnergyU = E; };
   void setEnergyV( Float_t E ) { mEnergyV = E; };
   void setWeightU( Float_t E ) { mWeightU = E; };
   void setWeightV( Float_t E ) { mWeightV = E; };
   void setIsValid( Bool_t isValid ){ mIsValid = isValid; };
   void setNumUsedTowers( UInt_t n );
   void addUsedTower( Int_t localIndex, Short_t towIndex, Float_t weight );
   void setUsedTowers( std::vector< Short_t >& usedIndices, std::vector< Float_t >& weights );
   //void setPid( PidType_t pid ){ mPid = pid; };

   // compute t-test
   void computeTtest2() {
      mTtest2 = ( mEnergyU - mEnergyV ) / ( mEnergyU + mEnergyV );
      mTtest2 *= mTtest2;
   };

   // to fill a EEmcHit_t from an StEEmcHit_t
   friend class StEEmcTreeMaker_t;

 protected:
   Short_t mSector;
   Short_t mClusIDu, mClusIDv;
   Int_t mTowerIdx;                                             // the main tower it is under
   Float_t mEnergyU, mEnergyV, mTtest2, mWeightU, mWeightV;
   Bool_t mIsValid;                                             //! just a flag whether to keep in vector
   //PidType_t mPid;

   TArrayS mUsedTowerIndices;                                   // The indices of the towers used to compute the energy
   TArrayF mUsedTowerWeights;                                   // The weights for the towers used to compute the energy

 private:
   /// Make class available to root
   ClassDef(StEEmcHit_t,1);   // Class to store EEmc Hits

};

std::ostream &operator<<( std::ostream &out, const StEEmcHit_t &hit );

/*
 * $Id: StEEmcHit.h,v 1.10 2012/06/01 21:50:13 sgliske Exp $
 * $Log: StEEmcHit.h,v $
 * Revision 1.10  2012/06/01 21:50:13  sgliske
 * Updated for overhaul of EEmcHit and EEmcCluster.  Both had dynamic arrays removed as well as
 * dependencies on StEEmcHit containers removed.  Converters between StEEmcHit containers and
 * EEmcTree containers now provided by static functions in StEEmcTreeMaker.
 *
 * Revision 1.9  2012/03/07 22:30:46  sgliske
 * general updates
 *
 * Revision 1.8  2011/08/18 15:48:38  sgliske
 * update
 *
 * Revision 1.7  2011/08/09 20:36:09  sgliske
 * working on adding MC support to AnalysisTreeMaker
 *
 * Revision 1.6  2011/07/28 22:04:59  sgliske
 * update
 *
 * Revision 1.5  2011/07/25 21:40:29  sgliske
 * update
 *
 * Revision 1.4  2011/07/20 21:35:26  sgliske
 * update
 *
 * Revision 1.3  2011/07/12 19:14:36  sgliske
 * StEEmcResponseTreeMaker working
 *
 * Revision 1.2  2011/07/12 14:13:15  sgliske
 * update
 *
 * Revision 1.1  2011/07/05 21:48:19  sgliske
 * split from StEEmcAnalysisTreeMaker
 *
 * Revision 1.4  2011/07/01 21:44:24  sgliske
 * update
 *
 * Revision 1.3  2011/06/29 16:37:59  sgliske
 * update
 *
 * Revision 1.2  2011/06/24 17:32:33  sgliske
 * Everything now compiles using cons
 *
 * Revision 1.1  2011/06/23 21:55:05  sgliske
 * daily update
 *
 */

#endif


@


1.10
log
@Updated for overhaul of EEmcHit and EEmcCluster.  Both had dynamic arrays removed as well as
dependencies on StEEmcHit containers removed.  Converters between StEEmcHit containers and
EEmcTree containers now provided by static functions in StEEmcTreeMaker.
@
text
@d113 1
a113 1
 * $Id: StEEmcHit.h,v 1.9 2012/03/07 22:30:46 sgliske Exp $
d115 5
@


1.9
log
@general updates
@
text
@d90 3
d113 1
a113 1
 * $Id: StEEmcHit.h,v 1.8 2011/08/18 15:48:38 sgliske Exp $
d115 3
@


1.8
log
@update
@
text
@d44 3
d59 1
d82 1
d96 1
d110 1
a110 1
 * $Id: StEEmcHit.h,v 1.7 2011/08/09 20:36:09 sgliske Exp $
d112 3
@


1.7
log
@working on adding MC support to AnalysisTreeMaker
@
text
@d10 3
d57 4
d104 1
a104 1
 * $Id: StEEmcHit.h,v 1.6 2011/07/28 22:04:59 sgliske Exp $
d106 3
@


1.6
log
@update
@
text
@d8 1
a8 1
 * Note: all functions are inlined and default copy constructors,
d12 2
a13 2
#ifndef _ST_IU_HIT_H_
#define _ST_IU_HIT_H_
d16 2
d52 5
d68 3
d81 1
a81 1
   Int_t mTowerIdx;
d85 3
d97 1
a97 1
 * $Id: StEEmcHit.h,v 1.5 2011/07/25 21:40:29 sgliske Exp $
d99 3
@


1.5
log
@update
@
text
@d6 1
a6 5
 * The basic information needed to define a hit:
 *  - x, y, z position
 *  - Energy E
 * 
 * along with some extra info needed for the IU point finder algo.
d84 1
a84 1
 * $Id: StEEmcHit.h,v 1.4 2011/07/20 21:35:26 sgliske Exp $
d86 3
@


1.4
log
@update
@
text
@d39 2
a40 1
   StEEmcHit_t( Short_t ID_in = -1 ) : StSimpleHit_t( ID_in ), mSector(-1), mClusIDu(-1), mClusIDv(-1), mTowerIdx(-1), mEnergyU(-1), mEnergyV(-1), mTtest2(1e100), mWeightU(1), mWeightV(1) { /* */ };
d53 1
d64 1
d77 1
d88 1
a88 1
 * $Id: StEEmcHit.h,v 1.3 2011/07/12 19:14:36 sgliske Exp $
d90 3
@


1.3
log
@StEEmcResponseTreeMaker working
@
text
@a4 20
 * $Id: StEEmcHit.h,v 1.2 2011/07/12 14:13:15 sgliske Exp $
 * $Log: StEEmcHit.h,v $
 * Revision 1.2  2011/07/12 14:13:15  sgliske
 * update
 *
 * Revision 1.1  2011/07/05 21:48:19  sgliske
 * split from StEEmcAnalysisTreeMaker
 *
 * Revision 1.4  2011/07/01 21:44:24  sgliske
 * update
 *
 * Revision 1.3  2011/06/29 16:37:59  sgliske
 * update
 *
 * Revision 1.2  2011/06/24 17:32:33  sgliske
 * Everything now compiles using cons
 *
 * Revision 1.1  2011/06/23 21:55:05  sgliske
 * daily update
 *
d19 2
d39 1
a39 1
   StEEmcHit_t( Short_t ID_in = -1 ) : StSimpleHit_t( ID_in ), mWeightU(1), mWeightV(1) { /* */ };
d43 1
d54 1
d70 1
d81 28
@


1.2
log
@update
@
text
@d5 1
a5 1
 * $Id: StEEmcHit.h,v 1.1 2011/07/05 21:48:19 sgliske Exp $
d7 3
d48 1
a48 1
#define ClassDefVec( CLASS );
d51 1
a51 1
ClassDefVec( StEEmcHit_t );
@


1.1
log
@split from StEEmcAnalysisTreeMaker
@
text
@d5 1
a5 1
 * $Id: StEEmcHit.h,v 1.4 2011/07/01 21:44:24 sgliske Exp $
d7 3
d45 5
a57 4
/*    Bool_t getIsAHadron() const { return mIsAHadron; }; */
/*    Bool_t getIsALepton() const { return mIsALepton; }; */
/*    Bool_t getIsPrompt() const { return mIsPrompt; }; */
/*    Bool_t getIsInAJet() const { return mIsInAJet; }; */
a67 4
/*    void setIsAHadron( Bool_t isAHadron ) { mIsAHadron = isAHadron; }; */
/*    void setIsALepton( Bool_t isALepton ) { mIsALepton = isALepton; }; */
/*    void setIsPrompt( Bool_t isPrompt ) {  mIsPrompt = isPrompt; }; */
/*    void setIsInAJet( Bool_t isInAJet ) {  mIsInAJet = isInAJet; }; */
a82 1
/*    Bool_t mIsAHadron, mIsALepton, mIsPrompt, mIsInAJet; */
@

