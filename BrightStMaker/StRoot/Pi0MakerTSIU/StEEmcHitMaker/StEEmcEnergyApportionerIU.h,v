head	1.8;
access;
symbols
	response:1.5;
locks; strict;
comment	@ * @;


1.8
date	2012.11.26.19.40.33;	author sgliske;	state dead;
branches;
next	1.7;

1.7
date	2012.05.22.22.01.08;	author sgliske;	state Exp;
branches;
next	1.6;

1.6
date	2012.05.17.22.47.02;	author sgliske;	state Exp;
branches;
next	1.5;

1.5
date	2011.08.03.22.16.52;	author sgliske;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.13.20.24.45;	author sgliske;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.11.15.14.31;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.07.20.53.04;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.05.21.48.19;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.8
log
@moved to official StEEmcPool
@
text
@/*!
 * \class StEEmcEnergyApportionerIU_t
 *
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * Weihong/Jason's energy sharing methods: weight the surrounding
 * towers by either the sum of the SMD cluster energies, or this sum
 * times a "leakage" factore (determined by Jason's spline function.)
 *
*/

#ifndef _ST_EEMC_ENERGY_APPORTIONER_IU_H_
#define _ST_EEMC_ENERGY_APPORTIONER_IU_H_

#include "StSimpleCluster.h"
#include "StEEmcHit.h"
#include "StEEmcHitMaker.h"
#include "StEEmcTowerClusterFinder.h"
#include "StEEmcEnergyApportioner.h"
#include "StESMDClustersPerSector.h"

class StEEmcEnergyApportionerIU_t : public StEEmcEnergyApportioner_t {

 public:
   enum WeightFunction_t { SMD_SUM, SMD_SUM_AND_LEAKAGE };

   StEEmcEnergyApportionerIU_t();
   virtual ~StEEmcEnergyApportionerIU_t() { /* */ };

   virtual void clear(){ /* */ };

   /// apportion the energy
   virtual Int_t find( EEmcEnergy_t* eemcEnergyPtr,
                       const StSimpleClusterVec_t& towerClusterVec,
                       const StESMDClustersVec_t &smdClusterVec,
                       StEEmcHitVec_t& hitVec );

   // modifier
   void setWeightFunction( WeightFunction_t funcType );
   void setCheckTowerBits( Bool_t doCheck ){ mCheckTowerBits = doCheck; };

 protected:
   typedef std::map< Int_t, Float_t > sparseVec_t;

   // option of whether to include towers in the energy which have
   // fail bits or bad status bits.
   Bool_t mCheckTowerBits;

   // geom class
   EEmcGeomSimple mEEmcGeomSimple;

   /// pointer to which function to use for weights
   Float_t (StEEmcEnergyApportionerIU_t::*weightFunc)( const StEEmcHit_t &hit, Int_t thisTowerIdx );

   /// Use just sum of SMD energies
   Float_t smdSumWeightFunc( const StEEmcHit_t &hit, Int_t thisTowerIdx );

   /// Use sum of SMD energies times leakage function (spline), i.e. the eeTowerFunction
   Float_t smdSumAndLeakageWeightFunc( const StEEmcHit_t &hit, Int_t thisTowerIdx );

 private:
   ClassDef( StEEmcEnergyApportionerIU_t, 1 );

};

#endif

/*
 * $Id: StEEmcEnergyApportionerIU.h,v 1.7 2012/05/22 22:01:08 sgliske Exp $
 * $Log: StEEmcEnergyApportionerIU.h,v $
 * Revision 1.7  2012/05/22 22:01:08  sgliske
 * updates
 *
 * Revision 1.6  2012/05/17 22:47:02  sgliske
 * working on switching to EEmcTree containers
 *
 * Revision 1.5  2011/08/03 22:16:52  sgliske
 * still debugging
 *
 * Revision 1.4  2011/07/13 20:24:45  sgliske
 * update
 *
 * Revision 1.3  2011/07/11 15:14:31  sgliske
 * before making StHitData class
 *
 * Revision 1.2  2011/07/07 20:53:04  sgliske
 * update
 *
 * Revision 1.1  2011/07/05 21:48:19  sgliske
 * split from StEEmcAnalysisTreeMaker
 *
 * Revision 1.1  2011/06/29 21:39:42  sgliske
 * update
 *
 * Revision 1.1  2011/06/23 21:55:04  sgliske
 * daily update
 */
@


1.7
log
@updates
@
text
@d69 1
a69 1
 * $Id: StEEmcEnergyApportionerIU.h,v 1.6 2012/05/17 22:47:02 sgliske Exp $
d71 3
@


1.6
log
@working on switching to EEmcTree containers
@
text
@d30 2
d69 1
a69 1
 * $Id: StEEmcEnergyApportionerIU.h,v 1.5 2011/08/03 22:16:52 sgliske Exp $
d71 3
@


1.5
log
@still debugging
@
text
@d9 1
a29 3
   /// clear things before doing the finding for the next event
   virtual void clear();

d31 2
a32 1
   virtual Int_t find( const StSimpleClusterVec_t& towerClusterVec,
a35 3
   // Note: this is needed before the "is ready" flag is set
   Int_t SetHitMakerPtr( StEEmcHitMaker_t *hitMaker );

d41 2
a46 3
   //  pointer for HitMaker
   const StEEmcHitMaker_t *mHitMakerPtr;

a49 9
   // other internal variables
   Bool_t mNeedToClear;
   Float_t mSumOfWeights[ kEEmcNumTowers ];
   std::map< Int_t, Float_t > storedFracHitInTower;

   /// Returns the fraction of the point's energy expected in tower.
   /// Really a wrapper for eeTowerFunction
   Float_t fracHitInTower( const StEEmcHit_t &hit, const StEEmcTower &tower );

d51 1
a51 1
   Float_t (StEEmcEnergyApportionerIU_t::*weightFunc)( double SMDresponse, const StEEmcHit_t &hit, const StEEmcTower &tower );
d54 1
a54 4
   Float_t smdSumWeightFunc( double SMDresponse, const StEEmcHit_t &hit, const StEEmcTower &tower );

   /// Use sum of SMD energies times leakage function (spline)
   Float_t smdSumAndLeakageWeightFunc( double SMDresponse, const StEEmcHit_t &hit, const StEEmcTower &tower );
d56 2
d67 1
a67 1
 * $Id: StEEmcEnergyApportionerIU.h,v 1.4 2011/07/13 20:24:45 sgliske Exp $
d69 3
@


1.4
log
@update
@
text
@d2 2
a3 1
 * \class StEEmcStEEmcEnergyApportioner_t
a4 4
 * $Id: StEEmcEnergyApportionerIU.h,v 1.3 2011/07/11 15:14:31 sgliske Exp $
 * $Log: StEEmcEnergyApportionerIU.h,v $
 * Revision 1.3  2011/07/11 15:14:31  sgliske
 * before making StHitData class
d6 3
a8 13
 * Revision 1.2  2011/07/07 20:53:04  sgliske
 * update
 *
 * Revision 1.1  2011/07/05 21:48:19  sgliske
 * split from StEEmcAnalysisTreeMaker
 *
 * Revision 1.1  2011/06/29 21:39:42  sgliske
 * update
 *
 * Revision 1.1  2011/06/23 21:55:04  sgliske
 * daily update
 *
 * Weihong/Jason's energy sharing method
d24 2
d40 4
d45 5
a49 1
   // pointer for HitMaker
a59 4
   /// Optimizer for the fracHitInTower function.
   /// Keeps track of previous calls and returns that value.
   Float_t fracHitInTowerOpt( const StEEmcHit_t &hit, const StEEmcTower &tower );

d64 10
d80 22
@


1.3
log
@before making StHitData class
@
text
@d4 1
a4 1
 * $Id: StEEmcEnergyApportionerIU.h,v 1.2 2011/07/07 20:53:04 sgliske Exp $
d6 3
a26 2
#include "StRoot/StEEmcPool/StEEmcA2EMaker/StEEmcA2EMaker.h"

d29 1
d37 1
a37 1
   StEEmcEnergyApportionerIU_t( StEEmcA2EMaker *a2EMakerPtr );
d48 2
d52 2
a53 2
   // pointer for A2EMaker
   StEEmcA2EMaker *mA2EMakerPtr;
@


1.2
log
@update
@
text
@d4 1
a4 1
 * $Id: StEEmcEnergyApportionerIU.h,v 1.1 2011/07/05 21:48:19 sgliske Exp $
d6 3
d67 3
@


1.1
log
@split from StEEmcAnalysisTreeMaker
@
text
@d4 1
a4 1
 * $Id: StEEmcEnergyApportionerIU.h,v 1.1 2011/06/29 21:39:42 sgliske Exp $
d6 3
d27 1
d40 1
a40 1
                       const StSimpleClusterVec_t stripClusterVec[],
@

