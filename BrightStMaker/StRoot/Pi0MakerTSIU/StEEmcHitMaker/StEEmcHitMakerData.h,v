head	1.4;
access;
symbols
	response:1.3;
locks; strict;
comment	@ * @;


1.4
date	2012.11.26.19.40.34;	author sgliske;	state dead;
branches;
next	1.3;

1.3
date	2011.10.26.21.37.35;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.22.16.33.06;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.12.14.13.16;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.4
log
@moved to official StEEmcPool
@
text
@/*!
 * \class StEEmcHitMaker_t
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * Includes the basic data from the hit maker that one would want to
 * save to disk.  Thus, one needs not to save (serialize) the entire
 * Hit Maker class, but only this class.
 *
 * Note, this class only has accessors, and no modifiers, as the
 * modification (creation) is done by child classes.
 *
*/

#ifndef _ST_EEMC_HIT_MAKER_DATA_H_
#define _ST_EEMC_HIT_MAKER_DATA_H_

// closely related inclusions
#include "StEEmcHit.h"
#include "StSimpleCluster.h"
#include "StESMDClustersPerSector.h"

class StEEmcHitMakerData_t {
 public:
   /// To keep track of layers of towers
   /// definition is consistant with EEMC A2EMaker
   enum TowerLayer_t { TOWER = 0, PRESHOWER1 = 1, PRESHOWER2 = 2, POSTSHOWER = 3, NUM_TOW_LAYERS = 4 };

   /// Construtor
   StEEmcHitMakerData_t(){ /* */ };

   /// Deconstructor
   virtual ~StEEmcHitMakerData_t(){ /* */ };

   /// no copy constructor nor equals operator needed, since includes no dynamically allocated memory;

   /// Clear for next event
   virtual void clearData();

   /// const accessors
   const StEEmcHitVec_t& getHitVec() const { return mHitVec; };
   const StSimpleClusterVec_t& getTowerClusterVec( TowerLayer_t layer ) const { return getTowerClusterVec(layer); };
   const StSimpleClusterVec_t& getTowerClusterVec() const { return mTowerClusterVec[ TOWER ]; };
   const StESMDClustersVec_t& getESMDClustersVec() const { return mESMDClusterVec; };

   /// non-const accessors
   StEEmcHitVec_t& getHitVec() { return mHitVec; };
   StSimpleClusterVec_t& getTowerClusterVec( TowerLayer_t layer );
   StSimpleClusterVec_t& getTowerClusterVec() { return mTowerClusterVec[ TOWER ]; };
   StESMDClustersVec_t& getSMDClusterVec() { return mESMDClusterVec; };

   Int_t getHitVecSize() const { return mHitVec.size(); };

   StEEmcHitMakerData_t& getHitMakerDataRef() { return *this; };

 protected:
   /// Containers for cluster from each tower layer
   StSimpleClusterVec_t mTowerClusterVec[ NUM_TOW_LAYERS ];

   /// Containers for clusters from each SMD layer (U or V) and for
   /// each sector
   StESMDClustersVec_t mESMDClusterVec;

   /// Container for hits
   StEEmcHitVec_t mHitVec;

 private:
   ClassDef( StEEmcHitMakerData_t, 1 );
};

#endif

/*
 * $Id: StEEmcHitMakerData.h,v 1.3 2011/10/26 21:37:35 sgliske Exp $
 * 
 * $Log: StEEmcHitMakerData.h,v $
 * Revision 1.3  2011/10/26 21:37:35  sgliske
 * Working on ANL EM Algo
 *
 * Revision 1.2  2011/07/22 16:33:06  sgliske
 * update
 *
 * Revision 1.1  2011/07/12 14:13:16  sgliske
 * update
 *
*/
@


1.3
log
@Working on ANL EM Algo
@
text
@d73 1
a73 1
 * $Id: StEEmcHitMakerData.h,v 1.2 2011/07/22 16:33:06 sgliske Exp $
d76 3
@


1.2
log
@update
@
text
@d51 1
a51 1
   Int_t getHitVecSize() { return mHitVec.size(); };
d73 1
a73 1
 * $Id: StEEmcHitMakerData.h,v 1.1 2011/07/12 14:13:16 sgliske Exp $
d76 3
@


1.1
log
@update
@
text
@d37 1
a37 1
   void  clear();
d49 1
a49 1
   StESMDClustersVec_t& getESMDClustersVec() { return mESMDClusterVec; };
d73 1
a73 1
 * $Id: $
d75 4
a78 1
 * $Log:  $
@

