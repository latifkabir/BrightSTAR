head	1.18;
access;
symbols
	response:1.13;
locks; strict;
comment	@// @;


1.18
date	2012.11.26.19.40.34;	author sgliske;	state dead;
branches;
next	1.17;

1.17
date	2012.05.23.19.58.38;	author sgliske;	state Exp;
branches;
next	1.16;

1.16
date	2012.05.22.22.01.08;	author sgliske;	state Exp;
branches;
next	1.15;

1.15
date	2012.05.17.22.47.02;	author sgliske;	state Exp;
branches;
next	1.14;

1.14
date	2012.05.17.18.04.25;	author sgliske;	state Exp;
branches;
next	1.13;

1.13
date	2011.12.13.21.32.26;	author sgliske;	state Exp;
branches;
next	1.12;

1.12
date	2011.10.26.21.37.35;	author sgliske;	state Exp;
branches;
next	1.11;

1.11
date	2011.08.09.20.36.09;	author sgliske;	state Exp;
branches;
next	1.10;

1.10
date	2011.08.09.18.06.28;	author sgliske;	state Exp;
branches;
next	1.9;

1.9
date	2011.08.05.15.51.28;	author sgliske;	state Exp;
branches;
next	1.8;

1.8
date	2011.08.02.16.52.02;	author sgliske;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.22.16.33.06;	author sgliske;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.21.21.17.37;	author sgliske;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.13.20.24.45;	author sgliske;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.12.14.13.16;	author sgliske;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.11.15.14.31;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.07.20.53.04;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.05.21.48.19;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.18
log
@moved to official StEEmcPool
@
text
@/*!
 *
 * \class StEEmcHitMakerSimple_t
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * See description in StEEmcHitMakerSimple.h
 *
*/

/// Include StRoot headers
#include "StRoot/St_base/Stypes.h"
#include "StRoot/St_base/StMessMgr.h"
#include "StRoot/StEEmcPool/EEmcTreeContainers/EEmcEnergy.h"

/// Include related classes
#include "StEEmcHitMakerSimple.h"
#include "StEEmcTowerClusterFinder.h"
#include "StEEmcStripClusterFinder.h"
#include "StEEmcPointFinder.h"
#include "StEEmcEnergyApportioner.h"

StEEmcHitMakerSimple_t::StEEmcHitMakerSimple_t( const Char_t *myName,          // name of this maker
                                                const Char_t *inputMakerName,  // maker from which to get input data
                                                StEEmcTowerClusterFinder_t* towerClusterFinder,
                                                StEEmcStripClusterFinder_t* stripClusterFinder,
                                                StEEmcPointFinder_t *pointFinder,
                                                StEEmcEnergyApportioner_t *energyApportioner ) :
   StEEmcHitMaker_t(    myName, inputMakerName ),
   mTowerClusterFinder( towerClusterFinder ),
   mStripClusterFinder( stripClusterFinder ),
   mPointFinder(        pointFinder ),
   mEnergyApportioner(  energyApportioner ),
   mClusterStripsFirst( 0 ) {

   // will check all input pointers during Init()
};

StEEmcHitMakerSimple_t::~StEEmcHitMakerSimple_t(){
   /* nothing to do */
};


Int_t StEEmcHitMakerSimple_t::Init(){
   Int_t ierr = kStOK;

   // check parent
   ierr = StEEmcHitMaker_t::Init();

   if( !ierr && !mTowerClusterFinder && ( mDoClusterTower[ TOWER ] || mDoClusterTower[ PRESHOWER1 ] || mDoClusterTower[ PRESHOWER2 ] || mDoClusterTower[ POSTSHOWER ] ) ){
      LOG_FATAL << "StEEmcHitMakerSimple_t passed null pointer for TowerClusterFinder" << endm;
      ierr = kStFatal;
   };

   if( !ierr && !mStripClusterFinder && mDoClusterSMDStrips ){
      LOG_FATAL << "StEEmcHitMakerSimple_t passed null pointer for StripClusterFinder" << endm;
      ierr = kStFatal;
   };

   if( !ierr && !mPointFinder ){
      LOG_FATAL << "StEEmcHitMakerSimple_t passed null pointer for PointFinder" << endm;
      ierr = kStFatal;
   };

   if( !ierr && !mEnergyApportioner ){
      LOG_FATAL << "StEEmcHitMakerSimple_t passed null pointer for EneryApportioner" << endm;
      ierr = kStFatal;
   };

   if( ierr )
      return ierr;

   // check readiness
   if( mTowerClusterFinder && !mTowerClusterFinder->isReady() ){
      LOG_FATAL << "sub-system TowerClusterFinder is not ready" << endm;
      ierr = kStFatal;
   };

   if( mStripClusterFinder && !mStripClusterFinder->isReady() ){
      LOG_FATAL << "sub-system StripClusterFinder is not ready" << endm;
      ierr = kStFatal;
   };

   if( !mPointFinder->isReady() ){
      LOG_FATAL << "sub-system PointFinder is not ready" << endm;
      ierr = kStFatal;
   };

   if( !mEnergyApportioner->isReady() ){
      LOG_FATAL << "sub-system EnergyApportioner is not ready" << endm;
      ierr = kStFatal;
   };

   if( ierr )
      LOG_FATAL << "StEEmcHitMakerSimple_t cannot initialize" << endm;

   return ierr;
};


/// Make Hits.  It is assumed that classes called by this function
/// will display their own log messages for all errors
Int_t StEEmcHitMakerSimple_t::Make(){
   //LOG_INFO << "==========> " << ClassName() << "::Make(), Event " << GetEventNumber() << endm;

   StFinderAlg_t::setEventNum( GetEventNumber() );

   // ----------> LOAD DATA <----------
   Int_t ierr = StEEmcHitMaker_t::Make();

   if( !ierr ){
      // ----------> CLUSTERING <----------

      //LOG_INFO << "----------> Clustering <----------" << endm;

      if( mClusterStripsFirst ){
         if( !ierr && mDoClusterSMDStrips )
            ierr = clusterStrips();

         if( !ierr )
            ierr = clusterTowers();
      } else {
         if( !ierr )
            ierr = clusterTowers();

         if( !ierr && mDoClusterSMDStrips )
            ierr = clusterStrips();
      };

      // ----------> POINT FINDING <----------

      //LOG_INFO << "----------> Point Finding <----------" << endm;

      if( !ierr )
         ierr = mPointFinder->find( *mEEmcEnergy, mTowerClusterVec[ TOWER ], mESMDClusterVec, mHitVec );

      //LOG_INFO << "-----> Found " << mHitVec.size() << " points" << endm;

      // ----------> ENERGY APPORTIONING (SHARING) <----------

      //LOG_INFO << "----------> Energy Apportioning <----------" << endm;

      if( !ierr )
         mEnergyApportioner->find( mEEmcEnergy, mTowerClusterVec[ TOWER ], mESMDClusterVec, mHitVec );


      // ----------> OUTPUT <----------

      if( ierr ){
         LOG_WARN << "StEEmcHitMakerSimple_t::find() returning error code of '" << ierr << "'" << endm;
      };
   };

   //static_cast< StEEmcHitMaker_t* >( this )->getHitVecSize();
   //LOG_INFO << "==========> Make done, mHitVec.size() = " << mHitVec.size() << endm;

   return ierr;
};

/// clear to prepare for next event
void StEEmcHitMakerSimple_t::Clear( Option_t* opts ){

   // Clear all classes.  Clear regardless of whether clustering, just
   // in case someone changes the "do cluster" options
   if( mTowerClusterFinder )
      mTowerClusterFinder->clear();
   if( mStripClusterFinder )
      mStripClusterFinder->clear();
   if( mPointFinder )
      mPointFinder->clear();
   if( mEnergyApportioner )
      mEnergyApportioner->clear();

   // clear the parent
   StEEmcHitMaker_t::Clear( opts );
};

Int_t StEEmcHitMakerSimple_t::clusterTowers(){
   Int_t ierr = kStOK;

   if( !ierr && mDoClusterTower[ TOWER ] )
      ierr = mTowerClusterFinder->find( mEEmcEnergy->eTow, mTowerClusterVec[ TOWER ] );

   if( !ierr && mDoClusterTower[ PRESHOWER1 ] )
      ierr = mTowerClusterFinder->find( mEEmcEnergy->ePre1, mTowerClusterVec[ PRESHOWER1 ] );

   if( !ierr && mDoClusterTower[ PRESHOWER2 ] )
      ierr = mTowerClusterFinder->find( mEEmcEnergy->ePre2, mTowerClusterVec[ PRESHOWER2 ] );

   if( !ierr && mDoClusterTower[ POSTSHOWER ] )
      ierr = mTowerClusterFinder->find( mEEmcEnergy->ePost, mTowerClusterVec[ POSTSHOWER ] );

   return ierr;
};

Int_t StEEmcHitMakerSimple_t::clusterStrips(){
   Int_t ierr = kStOK;

   mStripClusterFinder->resetClusterCount();
   for( Int_t sector = 0; sector < kEEmcNumSectors && !ierr; ++sector ){

      //LOG_INFO << "sector = " << sector << ", hit strips = " << mHitUStripPtr[ sector ]->size() << ", " << mHitVStripPtr[ sector ]->size() << endm;

      // set current sector
      mStripClusterFinder->setCurrentSector( sector );

      ESmdEnergy_t& eSMD = mEEmcEnergy->eSmd;

      // make sure there are at least some hit strips in this sector
      if( mEEmcEnergy->nStrips ){
         // add a new element for clusters from this sector
         mESMDClusterVec.push_back( StESMDClustersPerSector_t( sector ) );

         // get references, to make code easier to read
         StSimpleClusterVec_t &uClusVec = mESMDClusterVec.back().getClusterVecU();
         StSimpleClusterVec_t &vClusVec = mESMDClusterVec.back().getClusterVecV();

         // U layer
         mStripClusterFinder->setCurrentLayer( StEEmcStripClusterFinder_t::U_LAYER );
         ierr = mStripClusterFinder->find( eSMD.sec[sector].layer[0], uClusVec );

         //LOG_INFO << "-----> found " << uClusVec.size() << " u clusters." << endm;

         // V layer
         mStripClusterFinder->clear();
         mStripClusterFinder->setCurrentLayer( StEEmcStripClusterFinder_t::V_LAYER );
         ierr = mStripClusterFinder->find( eSMD.sec[sector].layer[1], vClusVec );

         //LOG_INFO << "-----> found " << vClusVec.size() << " v clusters." << endm;
         //LOG_INFO << "zzz\tSec " << sector << ": uSMD clus = " << uClusVec.size() << ", vSMD clus = " << vClusVec.size() << endm;

         // delete the last element if there were no clusters found in either layer
         if( uClusVec.empty() && vClusVec.empty() )
            mESMDClusterVec.pop_back();
      };
   };

   return ierr;
};

ClassImp( StEEmcHitMakerSimple_t );

// $Id: StEEmcHitMakerSimple.cxx,v 1.17 2012/05/23 19:58:38 sgliske Exp $
//
// $Log: StEEmcHitMakerSimple.cxx,v $
// Revision 1.17  2012/05/23 19:58:38  sgliske
// updates
//
// Revision 1.16  2012/05/22 22:01:08  sgliske
// updates
//
// Revision 1.15  2012/05/17 22:47:02  sgliske
// working on switching to EEmcTree containers
//
// Revision 1.14  2012/05/17 18:04:25  sgliske
// Moving from EEmcResponse to EEmcTree
//
// Revision 1.13  2011/12/13 21:32:26  sgliske
// Bug fix: now ensure clusters have unique IDs across sectors and layers.
// Otherwise, StMcHitMakerStrips has errors.
// Few other small updates also included in this checkin.
//
// Revision 1.12  2011/10/26 21:37:35  sgliske
// Working on ANL EM Algo
//
// Revision 1.11  2011/08/09 20:36:09  sgliske
// working on adding MC support to AnalysisTreeMaker
//
// Revision 1.10  2011/08/09 18:06:28  sgliske
// Allow StHitMakerSimple to cluster towers either before or after clustering SMD strips
//
// Revision 1.9  2011/08/05 15:51:28  sgliske
// bug fix
//
// Revision 1.8  2011/08/02 16:52:02  sgliske
// debugging
//
// Revision 1.7  2011/07/22 16:33:06  sgliske
// update
//
// Revision 1.6  2011/07/21 21:17:37  sgliske
// update
//
// Revision 1.5  2011/07/13 20:24:45  sgliske
// update
//
// Revision 1.4  2011/07/12 14:13:16  sgliske
// update
//
// Revision 1.3  2011/07/11 15:14:31  sgliske
// before making StHitData class
//
// Revision 1.2  2011/07/07 20:53:04  sgliske
// update
//
// Revision 1.1  2011/07/05 21:48:19  sgliske
// split from StEEmcAnalysisTreeMaker
//
// Revision 1.2  2011/07/01 21:44:24  sgliske
// update
//
// Revision 1.1  2011/06/23 21:55:05  sgliske
// daily update
//
// S. Gliske, last updated June, 2011
@


1.17
log
@updates
@
text
@d242 1
a242 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.16 2012/05/22 22:01:08 sgliske Exp $
d245 3
@


1.16
log
@updates
@
text
@d181 1
a181 1
      ierr = mTowerClusterFinder->find( mEEmcEnergy->etow, mTowerClusterVec[ TOWER ] );
d184 1
a184 1
      ierr = mTowerClusterFinder->find( mEEmcEnergy->epre1, mTowerClusterVec[ PRESHOWER1 ] );
d187 1
a187 1
      ierr = mTowerClusterFinder->find( mEEmcEnergy->epre2, mTowerClusterVec[ PRESHOWER2 ] );
d190 1
a190 1
      ierr = mTowerClusterFinder->find( mEEmcEnergy->epost, mTowerClusterVec[ POSTSHOWER ] );
d206 1
a206 1
      ESmdEnergy_t& eSMD = mEEmcEnergy->esmd;
d242 1
a242 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.15 2012/05/17 22:47:02 sgliske Exp $
d245 3
@


1.15
log
@working on switching to EEmcTree containers
@
text
@d49 1
a49 1
   if( !ierr && !mTowerClusterFinder ){
d54 1
a54 1
   if( !ierr && !mStripClusterFinder ){
d73 1
a73 1
   if( !mTowerClusterFinder->isReady() ){
d78 1
a78 1
   if( !mStripClusterFinder->isReady() ){
d242 1
a242 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.14 2012/05/17 18:04:25 sgliske Exp $
d245 3
@


1.14
log
@Moving from EEmcResponse to EEmcTree
@
text
@d134 1
a134 1
         ierr = mPointFinder->find( mTowerClusterVec[ TOWER ], mESMDClusterVec, mHitVec );
d143 1
a143 1
         mEnergyApportioner->find( mTowerClusterVec[ TOWER ], mESMDClusterVec, mHitVec );
d209 1
a209 1
      if( eSMD.nStrips ){
d242 1
a242 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.13 2011/12/13 21:32:26 sgliske Exp $
d245 3
@


1.13
log
@Bug fix: now ensure clusters have unique IDs across sectors and layers.
Otherwise, StMcHitMakerStrips has errors.
Few other small updates also included in this checkin.
@
text
@d13 1
d22 2
a23 2
StEEmcHitMakerSimple_t::StEEmcHitMakerSimple_t( const Char_t *myName,             // name of this maker in the StMaker hash table
                                                const Char_t *responseMakerName,  // name of the keeper in charge of the response
d28 1
a28 1
   StEEmcHitMaker_t(    myName, responseMakerName ),
d108 1
a108 1
   Int_t ierr = convertResponseToVec();
a150 4

//       for( UInt_t i=0; i<mHitVec.size(); ++i ){
//          LOG_INFO << mHitVec[i] << endm;
//       };
d173 1
a173 1
   // clear all parent
d181 1
a181 1
      ierr = mTowerClusterFinder->find( *(mHitTowerPtr[ TOWER ]), mTowerClusterVec[ TOWER ] );
d184 1
a184 1
      ierr = mTowerClusterFinder->find( *(mHitTowerPtr[ TOWER ]), mTowerClusterVec[ PRESHOWER1 ] );
d187 1
a187 1
      ierr = mTowerClusterFinder->find( *(mHitTowerPtr[ TOWER ]), mTowerClusterVec[ PRESHOWER2 ] );
d190 1
a190 1
      ierr = mTowerClusterFinder->find( *(mHitTowerPtr[ TOWER ]), mTowerClusterVec[ POSTSHOWER ] );
d206 1
a206 2
      // make sure there are at least some hits in this sector
      if( !mHitUStripPtr[ sector ]->empty() && !mHitUStripPtr[ sector ]->empty() ){
d208 2
d219 1
a219 1
         ierr = mStripClusterFinder->find( *(mHitUStripPtr[sector]), uClusVec );
d226 1
a226 1
         ierr = mStripClusterFinder->find( *(mHitVStripPtr[sector]), vClusVec );
a239 2


d242 1
a242 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.12 2011/10/26 21:37:35 sgliske Exp $
d245 5
@


1.12
log
@Working on ANL EM Algo
@
text
@d201 1
d246 1
a246 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.11 2011/08/09 20:36:09 sgliske Exp $
d249 3
@


1.11
log
@working on adding MC support to AnalysisTreeMaker
@
text
@d150 4
d156 1
a156 2
   static_cast< StEEmcHitMaker_t* >( this )->getHitVecSize();

d245 1
a245 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.10 2011/08/09 18:06:28 sgliske Exp $
d248 3
@


1.10
log
@Allow StHitMakerSimple to cluster towers either before or after clustering SMD strips
@
text
@a22 1
                                                InputType_t inputType,            // whether the response maker is a "response maker" or from the "tree reader"
d27 1
a27 1
   StEEmcHitMaker_t(    myName, responseMakerName, inputType ),
d32 1
a32 1
   mClusterStripsFirst( 1 ) {
d242 1
a242 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.9 2011/08/05 15:51:28 sgliske Exp $
d245 3
@


1.9
log
@bug fix
@
text
@d32 2
a33 1
   mEnergyApportioner(  energyApportioner ){
d115 9
a123 1
      //LOG_INFO << "-----> mDoClusterTower[ TOWER ] = " << mDoClusterTower[ TOWER ] << endm;
d125 2
a126 57
      if( !ierr && mDoClusterTower[ TOWER ] ){
         ierr = mTowerClusterFinder->find( *(mHitTowerPtr[ TOWER ]), mTowerClusterVec[ TOWER ] );

         //LOG_INFO << "-----> Tower cluster alg. found " << mTowerClusterVec[ TOWER ].size() << " clusters" << endm;
      };


      if( !ierr && mDoClusterTower[ PRESHOWER1 ] )
         ierr = mTowerClusterFinder->find( *(mHitTowerPtr[ TOWER ]), mTowerClusterVec[ PRESHOWER1 ] );

      if( !ierr && mDoClusterTower[ PRESHOWER2 ] )
         ierr = mTowerClusterFinder->find( *(mHitTowerPtr[ TOWER ]), mTowerClusterVec[ PRESHOWER2 ] );

      if( !ierr && mDoClusterTower[ POSTSHOWER ] )
         ierr = mTowerClusterFinder->find( *(mHitTowerPtr[ TOWER ]), mTowerClusterVec[ POSTSHOWER ] );

      //LOG_INFO << "-----> mDoClusterSMDStrips = " << mDoClusterSMDStrips << endm;

      // cluster
      if( !ierr && mDoClusterSMDStrips ){
         for( Int_t sector = 0; sector < kEEmcNumSectors && !ierr; ++sector ){

            //LOG_INFO << "sector = " << sector << ", hit strips = " << mHitUStripPtr[ sector ]->size() << ", " << mHitVStripPtr[ sector ]->size() << endm;

            // set current sector
            mStripClusterFinder->setCurrentSector( sector );

            // make sure there are at least some hits in this sector
            if( !mHitUStripPtr[ sector ]->empty() && !mHitUStripPtr[ sector ]->empty() ){

               // add a new element for clusters from this sector
               mESMDClusterVec.push_back( StESMDClustersPerSector_t( sector ) );

               // get references, to make code easier to read
               StSimpleClusterVec_t &uClusVec = mESMDClusterVec.back().getClusterVecU();
               StSimpleClusterVec_t &vClusVec = mESMDClusterVec.back().getClusterVecV();

               // U layer
               mStripClusterFinder->setCurrentLayer( StEEmcStripClusterFinder_t::U_LAYER );
               ierr = mStripClusterFinder->find( *(mHitUStripPtr[sector]), uClusVec );

               //LOG_INFO << "-----> found " << uClusVec.size() << " u clusters." << endm;

               // V layer
               mStripClusterFinder->clear();
               mStripClusterFinder->setCurrentLayer( StEEmcStripClusterFinder_t::V_LAYER );
               ierr = mStripClusterFinder->find( *(mHitVStripPtr[sector]), vClusVec );

               //LOG_INFO << "-----> found " << vClusVec.size() << " v clusters." << endm;

               //LOG_INFO << "zzz\tSec " << sector << ": uSMD clus = " << uClusVec.size() << ", vSMD clus = " << vClusVec.size() << endm;

               // delete the last element if there were no clusters found in either layer
               if( uClusVec.empty() && vClusVec.empty() )
                  mESMDClusterVec.pop_back();
            };
         };
d178 63
d243 1
a243 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.8 2011/08/02 16:52:02 sgliske Exp $
d246 3
@


1.8
log
@debugging
@
text
@d102 1
a102 1
   //LOG_INFO << "==========> Make starting, Event " << GetEventNumber() << endm;
d226 1
a226 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.7 2011/07/22 16:33:06 sgliske Exp $
d229 3
@


1.7
log
@update
@
text
@d102 3
a104 1
   //LOG_INFO << "==========> Make starting, mHitVec.size() = " << mHitVec.size() << endm;
d160 1
d166 2
d226 1
a226 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.6 2011/07/21 21:17:37 sgliske Exp $
d229 3
@


1.6
log
@update
@
text
@d134 1
a134 1
         for( Int_t sector = 1; sector < kEEmcNumSectors && !ierr; ++sector ){
d202 1
a202 1
void StEEmcHitMakerSimple_t::Clear( Option_t* ){
d215 2
a216 2
   // clear all containers
   StEEmcHitMakerData_t::clear();
d221 1
a221 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.5 2011/07/13 20:24:45 sgliske Exp $
d224 3
@


1.5
log
@update
@
text
@d22 1
a22 1
                                                const Char_t *responseMakerName,  // name of the maker in charge of setting the resonse
d102 1
a102 1
   LOG_INFO << "==========> Make starting, mHitVec.size() = " << mHitVec.size() << endm;
d110 1
a110 1
      LOG_INFO << "----------> Clustering <----------" << endm;
d112 1
a112 1
      LOG_INFO << "-----> mDoClusterTower[ TOWER ] = " << mDoClusterTower[ TOWER ] << endm;
d117 1
a117 1
         LOG_INFO << "-----> Tower cluster alg. found " << mTowerClusterVec[ TOWER ].size() << " clusters" << endm;
d130 1
a130 1
      LOG_INFO << "-----> mDoClusterSMDStrips = " << mDoClusterSMDStrips << endm;
d155 1
a155 1
               LOG_INFO << "-----> found " << uClusVec.size() << " u clusters." << endm;
d161 1
a161 1
               LOG_INFO << "-----> found " << vClusVec.size() << " v clusters." << endm;
d172 1
a172 1
      LOG_INFO << "----------> Point Finding <----------" << endm;
d177 1
a177 1
      LOG_INFO << "-----> Found " << mHitVec.size() << " points" << endm;
d181 1
a181 1
      LOG_INFO << "----------> Energy Apportioning <----------" << endm;
d196 1
a196 1
   LOG_INFO << "==========> Make done, mHitVec.size() = " << mHitVec.size() << endm;
d221 1
a221 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.4 2011/07/12 14:13:16 sgliske Exp $
d224 3
@


1.4
log
@update
@
text
@d21 3
a23 2
StEEmcHitMakerSimple_t::StEEmcHitMakerSimple_t( const Char_t *name, 
                                                StEEmcA2EMaker* a2EMakerPtr,
d28 1
a28 1
   StEEmcHitMaker_t(    name, a2EMakerPtr ),
a47 6
   // check pointers
   if( !ierr && !mA2EMakerPtr ){
      LOG_FATAL << "StEEmcHitMakerSimple_t passed null pointer for A2EMaker" << endm;
      ierr = kStFatal;
   };

a101 2
   Int_t ierr = kStOK;

d105 1
a105 1
   Int_t loadcode = load();
d107 1
a107 1
   if( loadcode ){
d221 1
a221 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.3 2011/07/11 15:14:31 sgliske Exp $
d224 3
@


1.3
log
@before making StHitData class
@
text
@d109 1
a109 1
   LOG_INFO << "==========> Make starting, mHit.size() = " << mHit.size() << endm;
d114 1
a114 6
   LOG_INFO << "load code = " << loadcode << endm;

   if( !loadcode ){
      LOG_INFO << "No hits in the towers nor SMDs." << endm;
   } else {

d119 1
a119 1
      LOG_INFO << "mDoClusterTower[ TOWER ] = " << mDoClusterTower[ TOWER ] << endm;
d124 1
a124 1
         LOG_INFO << "Tower cluster alg. found " << mTowerClusterVec[ TOWER ].size() << " clusters" << endm;
d137 1
a137 1
      LOG_INFO << "mDoClusterSMDStrips = " << mDoClusterSMDStrips << endm;
d143 1
a143 1
            LOG_INFO << "sector = " << sector << ", hit strips = " << mHitUStripPtr[ sector ]->size() << ", " << mHitVStripPtr[ sector ]->size() << endm;
d162 1
a162 1
               LOG_INFO << "found " << uClusVec.size() << " u clusters." << endm;
d168 1
a168 1
               LOG_INFO << "found " << vClusVec.size() << " v clusters." << endm;
d182 3
a184 1
         ierr = mPointFinder->find( mTowerClusterVec[ TOWER ], mESMDClusterVec, mHit );
d191 1
a191 1
         mEnergyApportioner->find( mTowerClusterVec[ TOWER ], mESMDClusterVec, mHit );
d203 1
a203 1
   LOG_INFO << "==========> Make done, mHit.size() = " << mHit.size() << ", this = " << this << endm;
d212 1
a212 1
   // incase some changes the do cluster options
d223 1
a223 7
   for( Int_t i = 0; i < NUM_TOW_LAYERS; ++i )
      mTowerClusterVec[i].clear();
   for( UInt_t i = 0; i < mESMDClusterVec.size(); ++i )
      mESMDClusterVec[i].clear();
   mESMDClusterVec.clear();
   mHit.clear();

d228 1
a228 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.2 2011/07/07 20:53:04 sgliske Exp $
d231 3
@


1.2
log
@update
@
text
@d77 14
a90 2
   Int_t mIsReady = mTowerClusterFinder->isReady() && mStripClusterFinder->isReady()
      && mPointFinder->isReady() && mEnergyApportioner->isReady();
d92 2
a93 3
   if( !mIsReady ){
      LOG_FATAL << "StEEmcHitMakerSimple_t cannot initialize";
      LOG_FATAL << " due to a subsystem not being ready." << endm;
d97 3
d109 2
d112 13
a124 1
   ierr = load();
d126 2
a127 4
   if( ierr ){
      LOG_WARN << "StEEmcHitMakerSimple_t::FindHits()";
      LOG_WARN << "Could not load data, error value is " << ierr << endm;
   };
d129 2
a130 1
   // ----------> CLUSTERING <----------
a131 2
   if( !ierr && mDoClusterTower[ TOWER ] )
      ierr = mTowerClusterFinder->find( *(mHitTowerPtr[ TOWER ]), mTowerClusterVec[ TOWER ] );
d142 2
d148 5
d167 2
d173 2
d184 2
d191 2
d202 5
d208 1
a208 1
      return ierr;
d237 1
a237 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.1 2011/07/05 21:48:19 sgliske Exp $
d240 3
@


1.1
log
@split from StEEmcAnalysisTreeMaker
@
text
@d119 1
a119 10
         for( Int_t i = 1; i< kNumEEmcStripVecs && !ierr; ++i ){
            // note: is slightly slower to call this function rather than
            // just put the math here, but it is easier to maintain the
            // code (less bugs) if all the conversion code is in one place.
            Int_t sector, plane;
            convertSMDIndex2SectorPlane( i, sector, plane );

            // tell the cluster finder whether this is a u or v strip.
            plane ? mStripClusterFinder->setCurrentLayer( StEEmcStripClusterFinder_t::V_LAYER ) 
               : mStripClusterFinder->setCurrentLayer( StEEmcStripClusterFinder_t::U_LAYER );
d121 22
a142 2
            // find the clusters
            ierr = mStripClusterFinder->find( *(mHitStripPtr[i]), mStripClusterVec[i] );
d149 1
a149 1
         ierr = mPointFinder->find( mTowerClusterVec[ TOWER ], mStripClusterVec, mHit );
d154 1
a154 1
         mEnergyApportioner->find( mTowerClusterVec[ TOWER ], mStripClusterVec, mHit );
d183 3
a185 2
   for( Int_t i = 0; i < kEEmcNumSmdUVs; ++i )
      mStripClusterVec[i].clear();
d192 1
a192 1
// $Id: StEEmcHitMakerSimple.cxx,v 1.2 2011/07/01 21:44:24 sgliske Exp $
d195 3
@

