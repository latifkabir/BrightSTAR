head	1.4;
access;
symbols
	response:1.3;
locks; strict;
comment	@ * @;


1.4
date	2012.10.09.03.58.25;	author sgliske;	state dead;
branches;
next	1.3;

1.3
date	2011.12.28.14.54.23;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2011.12.07.22.33.11;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.18.01.47.03;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.4
log
@updates
@
text
@/*!
 *
 * \class GmmEm1D_t
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * Solve 1D Gaussian Mixture Model with EM Alg.  Implemented by
 * S. Gliske, May and Nov. 2011.
 *
 */

#ifndef _GMM_EM_1D_H_
#define _GMM_EM_1D_H_

#include <vector>
#include <string>

struct GmmEmDataElement_t;
struct GausParam_t;

typedef GmmEmDataElement_t GmmEmData_t;
typedef std::vector< GmmEmDataElement_t > GmmEmDataVec_t;
typedef std::vector< GausParam_t >   GmmEmGausParamVec_t;
typedef std::vector< double* > WeightVec_t;

struct GmmEmDataElement_t {
   int idx;
   double val;

   GmmEmDataElement_t( int i = -1, double x = 0 ) : idx(i), val(x) { /* */ };
};

struct GausParam_t {
   double A, mean, sigmaSq;

   GausParam_t( double a = 1, double m = 1, double s2 = 1 ) : A(a), mean(m), sigmaSq(s2) { /* */ };
   bool operator<( const GausParam_t& other ){ return A < other.A; };
};

class GmmEm1D_t {

 public:
   GmmEm1D_t();
   ~GmmEm1D_t();

   // 0 indicates OK, !0 indicates error. Querry 'getMessage()' to
   // retreive details of the error.  Note: the current value of
   // output is used for the initialization, thus one must initialize
   // the clusters before calling 'solve'.
   int solve( const GmmEmDataVec_t& input, GmmEmGausParamVec_t& output, double* chiSq = 0 );
   const char* getMessage();

   void setMaxIters( int maxIters ){ mMaxIters = maxIters; };
   const WeightVec_t& getWeights(){ return mWeight; };

 protected:
   int mMaxIters;
   WeightVec_t mWeight;
   std::string mStatusMessage;

   const GmmEmDataVec_t *mInputPtr;

   // static funct to eval Gaussian
   static double EvalGaus( double A, double mu, double sigmaSq, double x );

   // core functions
   int Expectation     ( const GmmEmGausParamVec_t& cluster,       WeightVec_t& weight );
   int Maximization    (       GmmEmGausParamVec_t& cluster, const WeightVec_t& weight );

   double computeChiSq (  const GmmEmGausParamVec_t& cluster, const WeightVec_t& weight, double totE );
};

#endif


/*
 * $Id: GmmEm1D.h,v 1.3 2011/12/28 14:54:23 sgliske Exp $
 * $Log: GmmEm1D.h,v $
 * Revision 1.3  2011/12/28 14:54:23  sgliske
 * update
 *
 * Revision 1.2  2011/12/07 22:33:11  sgliske
 * update
 *
 * Revision 1.1  2011/11/18 01:47:03  sgliske
 * today
 *
 * 
 */
@


1.3
log
@update
@
text
@d76 1
a76 1
 * $Id: GmmEm1D.h,v 1.2 2011/12/07 22:33:11 sgliske Exp $
d78 3
@


1.2
log
@update
@
text
@d36 1
d76 1
a76 1
 * $Id: GmmEm1D.h,v 1.1 2011/11/18 01:47:03 sgliske Exp $
d78 3
@


1.1
log
@today
@
text
@d17 2
a18 2
class GmmEmDataElement_t;
class GausParam_t;
d20 1
d42 1
d48 1
a48 1
   int solve( const GmmEmDataVec_t&  input, GmmEmGausParamVec_t& output );
d52 1
d56 1
d65 2
a66 2
   int Expectation     ( const std::vector< GausParam_t >& cluster,       WeightVec_t& weight );
   int Maximization    (       std::vector< GausParam_t >& cluster, const WeightVec_t& weight );
d68 1
d75 5
a79 2
 * $Id: $
 * $Log: $
@

