head	1.3;
access;
symbols
	response:1.2;
locks; strict;
comment	@ * @;


1.3
date	2012.10.09.03.57.21;	author sgliske;	state dead;
branches;
next	1.2;

1.2
date	2011.11.18.01.47.03;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.08.18.15.48.38;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.3
log
@removed unused makers
@
text
@/*!
 * \class StMcEEmcHitMakerStrips_t
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * Implements a specific method for the StMcEEmcHitMakerStrips_t
 * class, aligning the MC tracks and reconstructed points using the
 * strip energies.
 *
*/

#ifndef _ST_MC_EEMC_HIT_MAKER_STRIPS_H_
#define _ST_MC_EEMC_HIT_MAKER_STRIPS_H_

#include <string>

// StRoot inclusions
#include "StMaker.h"

#include "StRoot/StEEmcPool/StEEmcResponseTreeMaker/StMcStripResponse.h"

// closely related inclusions
#include "StMcEEmcHitMaker.h"
#include "StSimpleCluster.h"

class StMcEEmcHitMakerStrips_t : public StMcEEmcHitMaker_t {
 public:
   /// Construtor
   StMcEEmcHitMakerStrips_t( const Char_t *myName,             // name of this maker in the StMaker hash table
                             const Char_t *responseMakerName,  // name of the maker in charge of setting the resonse
                             const Char_t *hitMakerName );     // name of the hit maker

   /// Deconstructor
   virtual ~StMcEEmcHitMakerStrips_t(){ /* */ };

   /// Make, i.e. compute the associations
   virtual Int_t Make();

 protected:
   struct StripWeightStruct_t {
      const StMcStripResponse_t* stripRespPtr;
      Float_t weight;
      StripWeightStruct_t() : stripRespPtr(0), weight(0) { /* */ };
      StripWeightStruct_t( const StMcStripResponse_t* p, Float_t w ) : stripRespPtr(p), weight(w) { /* */ };
   };

   // get which strips are used by a given cluster ID in a given map (i.e. in a given layer)
   Int_t fillStripsUsed( const Short_t sector,
                         const Short_t ID,
                         const std::map< Short_t, const StSimpleCluster_t* >& clusMap,
                         const std::map< Short_t, const StMcStripResponse_t* > stripMap,
                         std::vector< StripWeightStruct_t >& stripsUsed );

   // include weights for a given layer
   Int_t includeWeightsFromLayer( const std::vector< StripWeightStruct_t >& usedStrips, std::map< Short_t, Float_t >& trackWeightMap );

   // map to look up the actual MC tracks
   std::map< Int_t, StMcSimpleTrack_t* > mTrackMap;

 private:
   ClassDef( StMcEEmcHitMakerStrips_t, 1 );

};

#endif

/*
 * $Id: StMcEEmcHitMakerStrips.h,v 1.2 2011/11/18 01:47:03 sgliske Exp $
 * 
 * $Log: StMcEEmcHitMakerStrips.h,v $
 * Revision 1.2  2011/11/18 01:47:03  sgliske
 * today
 *
 * Revision 1.1  2011/08/18 15:48:38  sgliske
 * update
 *
 *
*/
@


1.2
log
@today
@
text
@d67 1
a67 1
 * $Id: StMcEEmcHitMakerStrips.h,v 1.1 2011/08/18 15:48:38 sgliske Exp $
d70 3
@


1.1
log
@update
@
text
@d56 3
d67 1
a67 1
 * $Id: $
d69 4
a72 1
 * $Log: $
@

