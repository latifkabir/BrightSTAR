head	1.4;
access;
symbols
	response:1.3;
locks; strict;
comment	@ * @;


1.4
date	2012.10.09.03.57.21;	author sgliske;	state dead;
branches;
next	1.3;

1.3
date	2011.08.16.13.33.18;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2011.08.09.21.46.22;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.08.09.20.36.09;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.4
log
@removed unused makers
@
text
@/*!
 * \class StMcEEmcHitMaker_t
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * This class is used for Monte Carlo data, and must be placed in the
 * StChain after the StEEmcHitMaker_t.  The StMcEEmcHitMaker_t class
 * is responsible for associating the MC tracks with the given hits.
 *
*/

#ifndef _ST_MC_EEMC_HIT_MAKER_H_
#define _ST_MC_EEMC_HIT_MAKER_H_

#include <string>

// StRoot inclusions
#include "StMaker.h"

#include "StRoot/StEEmcPool/StEEmcResponseTreeMaker/StEEmcResponse.h"
#include "StRoot/StEEmcPool/StEEmcResponseTreeMaker/StMcEEmcResponse.h"

// closely related inclusions
#include "StMcEEmcHit.h"
#include "StEEmcHitMakerData.h"

class StMcEEmcHitMaker_t : public StMaker {
 public:
   /// Construtor
   StMcEEmcHitMaker_t( const Char_t *myName,             // name of this maker in the StMaker hash table
                       const Char_t *responseMakerName,  // name of the maker in charge of setting the resonse
                       const Char_t *hitMakerName );     // name of the hit maker

   /// Deconstructor
   virtual ~StMcEEmcHitMaker_t(){ /* */ };

   /// Initialize
   Int_t Init();

   /// Make, i.e. compute the associations
   virtual Int_t Make() = 0;

   /// Clear for next event
   void  Clear(Option_t *opts="");

   /// modifiers

   /// accessors
         StMcEEmcHitVec_t& getMcHitVec()       { return mMcHitVec; };
   const StMcEEmcHitVec_t& getMcHitVec() const { return mMcHitVec; };

 protected:
   // regarding finding the input
   std::string mResponseMakerName;
   std::string mHitDataName;
   StMcEEmcResponse_t *mMcResponsePtr;
   StEEmcHitMakerData_t *mHitDataPtr;

   // the data
   StMcEEmcHitVec_t mMcHitVec;

 private:
   ClassDef( StMcEEmcHitMaker_t, 1 );

};

#endif

/*
 * $Id: StMcEEmcHitMaker.h,v 1.3 2011/08/16 13:33:18 sgliske Exp $
 * 
 * $Log: StMcEEmcHitMaker.h,v $
 * Revision 1.3  2011/08/16 13:33:18  sgliske
 * debugging MC
 *
 * Revision 1.2  2011/08/09 21:46:22  sgliske
 * debugging
 *
 * Revision 1.1  2011/08/09 20:36:09  sgliske
 * working on adding MC support to AnalysisTreeMaker
 *
*/
@


1.3
log
@debugging MC
@
text
@d69 1
a69 1
 * $Id: StMcEEmcHitMaker.h,v 1.2 2011/08/09 21:46:22 sgliske Exp $
d72 3
@


1.2
log
@debugging
@
text
@d40 1
a40 1
   Int_t Make();
d69 1
a69 1
 * $Id: StMcEEmcHitMaker.h,v 1.1 2011/08/09 20:36:09 sgliske Exp $
d72 3
@


1.1
log
@working on adding MC support to AnalysisTreeMaker
@
text
@d47 3
d69 1
a69 1
 * $Id:  $
d71 4
a74 1
 * $Log: $
@

