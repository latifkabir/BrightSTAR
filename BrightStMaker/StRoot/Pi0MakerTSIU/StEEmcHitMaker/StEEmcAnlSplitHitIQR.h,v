head	1.7;
access;
symbols
	response:1.6;
locks; strict;
comment	@ * @;


1.7
date	2012.10.09.03.57.19;	author sgliske;	state dead;
branches;
next	1.6;

1.6
date	2011.12.13.21.32.26;	author sgliske;	state Exp;
branches;
next	1.5;

1.5
date	2011.12.06.22.36.35;	author sgliske;	state Exp;
branches;
next	1.4;

1.4
date	2011.11.30.23.03.14;	author sgliske;	state Exp;
branches;
next	1.3;

1.3
date	2011.11.28.16.52.23;	author sgliske;	state Exp;
branches;
next	1.2;

1.2
date	2011.11.23.19.06.55;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.23.18.06.42;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.7
log
@removed unused makers
@
text
@/*!
 *
 * \class StEEmcAnlSplitHitIQR_t
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * Split hits based on interquartile range (IQR).  Use GMM to split
 * into two.
 *
 * Criterea is IQR > a + b*eta + c*ET + d*ET with
 *  - ET = E / cosh(eta)
 * and default values
 *  -  a = 15.5
 *  -  b = -5.0
 *  -  c = -0.40
 *  -  d =  0.0083
 *
 */

#ifndef _EEMC_ANL_SPLIT_HIT_QUARTILE_H
#define _EEMC_ANL_SPLIT_HIT_QUARTILE_H

#include <TRandom3.h>

#include "Stypes.h"
#include "AnlEMPoint.h"
#include "StEEmcAnlSplitHitAlgo.h"
#include "GmmEm1D/GmmEm1D.h"
class StEEmcAnlHit_t;

#include "StRoot/StEEmcUtil/EEmcGeom/EEmcGeomDefs.h"

// the class
class StEEmcAnlSplitHitIQR_t : public StEEmcAnlSplitHitAlgo_t {
 public:
   /// Construtor, deconstructor
   StEEmcAnlSplitHitIQR_t( Int_t maxGmmIters = 15 );
   virtual ~StEEmcAnlSplitHitIQR_t();

   // default copy constructor, eq. op. OK

   /// Initialize
   virtual Int_t Init();

   /// Find all the hits
   virtual Int_t splitHit( const StEEmcAnlHit_t& hit, Bool_t& doSplit, Bool_t& doInvalidate, AnlEMPoint_t& point1, AnlEMPoint_t& point2 );

   // Query uncertainy in u and v layers, if available
   // Returns error if not implemented.
   Int_t getUncert( Int_t& sector, Float_t& u1hitUncert, Float_t& v1hitUncert, Float_t& u2hitUncert, Float_t& v2hitUncert );

   // modifiers
   void setMaxNumTrials( Int_t val ){ mMaxNumTrials = val; };
   void setMinStripE( Float_t val ){ mMinStripE = val; };
   void setParameters( Float_t a, Float_t b, Float_t c, Float_t d ){ mA = a; mB = b; mC = c; mD = d; };
   void setDefaultSigma( Float_t val ){ mDefaultSigma = val; };
   void setIQRsigmaRatio( Float_t val ){ mIQRsigmaRatio = val; };

   // accessors
   Int_t getMaxNumTrials() const { return mMaxNumTrials; };
   Float_t getDefaultSigma() const { return mDefaultSigma; };
   Float_t getIQRsigmaRatio() const { return mIQRsigmaRatio; };

 protected:
   enum { kMaxNumLayers = 4 };
   Float_t mStripEnergyArray[kMaxNumLayers][kEEmcNumStrips];
   Float_t mCDF[kEEmcNumStrips];
   Float_t mIQR[kMaxNumLayers];
   Float_t mMedian[kMaxNumLayers];
   Float_t mTotE[kMaxNumLayers];
   Float_t mEwMean[kMaxNumLayers];
   TVector3 mTempVector;

   Int_t mMaxNumTrials;
   Float_t mA, mB, mC, mD;

   // for solving the GMM
   GmmEm1D_t mGmmEm;
   Float_t mDefaultSigma;
   Float_t mIQRsigmaRatio;
   Float_t mMinStripE;
   Int_t mSector;
   Float_t mU1hitUncert, mV1hitUncert, mU2hitUncert, mV2hitUncert;

   TRandom3 rand;

   // to find quartile positions
   Float_t findPosition( Float_t energy );

 private:
   ClassDef( StEEmcAnlSplitHitIQR_t, 1 );
};

#endif

/*
 * $Id: StEEmcAnlSplitHitIQR.h,v 1.6 2011/12/13 21:32:26 sgliske Exp $
 * $Log: StEEmcAnlSplitHitIQR.h,v $
 * Revision 1.6  2011/12/13 21:32:26  sgliske
 * Bug fix: now ensure clusters have unique IDs across sectors and layers.
 * Otherwise, StMcHitMakerStrips has errors.
 * Few other small updates also included in this checkin.
 *
 * Revision 1.5  2011/12/06 22:36:35  sgliske
 * update
 *
 * Revision 1.4  2011/11/30 23:03:14  sgliske
 * today
 *
 * Revision 1.3  2011/11/28 16:52:23  sgliske
 * today
 *
 * Revision 1.2  2011/11/23 19:06:55  sgliske
 * update
 *
 * Revision 1.1  2011/11/23 18:06:42  sgliske
 * creation
 *
 * 
 */
@


1.6
log
@Bug fix: now ensure clusters have unique IDs across sectors and layers.
Otherwise, StMcHitMakerStrips has errors.
Few other small updates also included in this checkin.
@
text
@d96 1
a96 1
 * $Id: StEEmcAnlSplitHitIQR.h,v 1.5 2011/12/06 22:36:35 sgliske Exp $
d98 5
@


1.5
log
@update
@
text
@a73 1
   Float_t mMinStripE;
d80 1
d96 1
a96 1
 * $Id: StEEmcAnlSplitHitIQR.h,v 1.4 2011/11/30 23:03:14 sgliske Exp $
d98 3
@


1.4
log
@today
@
text
@d47 4
d53 1
d68 1
d74 1
d81 2
d96 1
a96 1
 * $Id: StEEmcAnlSplitHitIQR.h,v 1.3 2011/11/28 16:52:23 sgliske Exp $
d98 3
@


1.3
log
@today
@
text
@d64 1
d87 1
a87 1
 * $Id: StEEmcAnlSplitHitIQR.h,v 1.2 2011/11/23 19:06:55 sgliske Exp $
d89 3
@


1.2
log
@update
@
text
@d30 2
d50 2
d55 2
d63 1
d71 2
d86 1
a86 1
 * $Id: StEEmcAnlSplitHitIQR.h,v 1.1 2011/11/23 18:06:42 sgliske Exp $
d88 3
@


1.1
log
@creation
@
text
@d11 1
d47 1
d56 2
d60 1
d77 5
a81 2
 * $Id: $
 * $Log:  $
@

