head	1.3;
access;
symbols
	response:1.2;
locks; strict;
comment	@ * @;


1.3
date	2012.10.09.03.57.19;	author sgliske;	state dead;
branches;
next	1.2;

1.2
date	2011.11.28.16.52.23;	author sgliske;	state Exp;
branches;
next	1.1;

1.1
date	2011.11.23.17.57.04;	author sgliske;	state Exp;
branches;
next	;


desc
@@


1.3
log
@removed unused makers
@
text
@/*!
 *
 * \class StEEmcAnlSplitHitGausQuartile_t
 * \author Stephen Gliske <sgliske@@anl.gov>
 *
 * Split hits based on whether energy distribution quartiles match
 * those expected from a Guassian distribution.
 *
 */

#ifndef _EEMC_ANL_SPLIT_HIT_GAUS_QUARTILE_H
#define _EEMC_ANL_SPLIT_HIT_GAUS_QUARTILE_H

#include <TRandom3.h>

#include "Stypes.h"
#include "AnlEMPoint.h"
#include "StEEmcAnlSplitHitAlgo.h"
#include "GmmEm1D/GmmEm1D.h"
class StEEmcAnlHit_t;

#include "StRoot/StEEmcUtil/EEmcGeom/EEmcGeomDefs.h"

// the class
class StEEmcAnlSplitHitGausQuartile_t : public StEEmcAnlSplitHitAlgo_t {
 public:
   /// Construtor, deconstructor
   StEEmcAnlSplitHitGausQuartile_t( Int_t maxGmmIters = 15 );
   virtual ~StEEmcAnlSplitHitGausQuartile_t();

   // default copy constructor, eq. op. OK

   /// Initialize
   virtual Int_t Init();

   /// Find all the hits
   virtual Int_t splitHit( const StEEmcAnlHit_t& hit, Bool_t& doSplit, Bool_t& doInvalidate, AnlEMPoint_t& point1, AnlEMPoint_t& point2 );

   // modifiers
   void setMaxNumTrials( Int_t val ){ mMaxNumTrials = val; };
   void setSumSqDifThres( Float_t val ){ mSumSqDifThres = val; };
   void setDefaultSigma( Float_t val ){ mDefaultSigma = val; };
   void setAllowedSigmaFrac( Float_t val ){ mAllowedSigmaFrac = val; };

   // accessors
   Int_t getMaxNumTrials() const { return mMaxNumTrials; };
   Float_t getSumSqDifThres() const { return mSumSqDifThres; };
   Float_t getDefaultSigma() const { return mDefaultSigma; };
   Float_t getAllowedSigmaFrac() const { return mAllowedSigmaFrac; };

 protected:
   enum { kMaxNumLayers = 4 };
   Float_t mStripEnergyArray[kMaxNumLayers][kEEmcNumStrips];
   Float_t mCDF[kEEmcNumStrips];

   Int_t mMaxNumTrials;
   Float_t mSumSqDifThres;
   Float_t mDefaultSigma;
   Float_t mAllowedSigmaFrac;

   // for solving the GMM
   GmmEm1D_t mGmmEm;

   TRandom3 rand;

   // to find quartile positions
   Float_t findPosition( Float_t energy );

 private:
   ClassDef( StEEmcAnlSplitHitGausQuartile_t, 1 );
};

// for holding data
struct QuartileDataInnerElement_t {
   Float_t mExpected;
   Float_t mActual;

   Float_t sqDif(){ Float_t temp = (mExpected-mActual); return temp*temp; };
   QuartileDataInnerElement_t( Float_t e = -1, Float_t a = -1 ) : mExpected(e), mActual(a) { /* */ };

};

inline std::ostream &operator<<( std::ostream &out, const QuartileDataInnerElement_t &elem ){
   out << elem.mExpected << ' ' << elem.mActual;
   return out;
};

struct QuartileDataElement_t {
   QuartileDataInnerElement_t mQinnerData[3];

   Float_t mSumSqDif;
   Float_t mUncert;

   QuartileDataElement_t() : mSumSqDif(0) { /* */ };
   void computeSumSqDif(){ mSumSqDif = mQinnerData[0].sqDif() + mQinnerData[1].sqDif() + mQinnerData[2].sqDif(); };
   Bool_t operator< ( const QuartileDataElement_t& rhs ){ return mSumSqDif < rhs.mSumSqDif; };
};

typedef std::vector< QuartileDataElement_t > QuartileData_t;

#endif

/*
 * $Id: StEEmcAnlSplitHitGausQuartile.h,v 1.2 2011/11/28 16:52:23 sgliske Exp $
 * $Log: StEEmcAnlSplitHitGausQuartile.h,v $
 * Revision 1.2  2011/11/28 16:52:23  sgliske
 * today
 *
 * Revision 1.1  2011/11/23 17:57:04  sgliske
 * Moving StEEmcAnlSplitHitQuartile -> StEEmcAnlSplitHitGausQuartile
 *
 * Revision 1.1  2011/11/18 01:47:03  sgliske
 * today
 *
 * 
 */
@


1.2
log
@today
@
text
@d104 1
a104 1
 * $Id: StEEmcAnlSplitHitGausQuartile.h,v 1.1 2011/11/23 17:57:04 sgliske Exp $
d106 3
@


1.1
log
@Moving StEEmcAnlSplitHitQuartile -> StEEmcAnlSplitHitGausQuartile
@
text
@d3 1
a3 1
 * \class StEEmcAnlSplitHitQuartile_t
d11 2
a12 2
#ifndef _EEMC_ANL_SPLIT_HIT_QUARTILE_H
#define _EEMC_ANL_SPLIT_HIT_QUARTILE_H
d22 2
d25 1
a25 1
class StEEmcAnlSplitHitQuartile_t : public StEEmcAnlSplitHitAlgo_t {
d28 2
a29 2
   StEEmcAnlSplitHitQuartile_t( Int_t maxGmmIters = 15 );
   virtual ~StEEmcAnlSplitHitQuartile_t();
d70 1
a70 1
   ClassDef( StEEmcAnlSplitHitQuartile_t, 1 );
d104 5
a108 2
 * $Id: StEEmcAnlSplitHitQuartile.h,v 1.1 2011/11/18 01:47:03 sgliske Exp $
 * $Log: StEEmcAnlSplitHitQuartile.h,v $
@

